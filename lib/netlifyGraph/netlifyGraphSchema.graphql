"""An internal directive used by Netlify Graph"""
directive @netlify(
  """Specify how the operation should be executed in production"""
  executionStrategy: OneGraphExecutionStrategy = PERSISTED

  """The docstring for this operation"""
  doc: String

  """The uuid of the operation (normally auto-generated)"""
  id: String!
) on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""An internal directive used by Netlify Graph to handle caching"""
directive @netlifyCacheControl(
  """
  Whether to fallback to a previous successful response if the current request fails
  """
  fallbackOnError: Boolean

  """The cache strategy for this operation."""
  cacheStrategy: OneGraphPersistedQueryCacheStrategyArg

  """Whether caching is enabled for this operation."""
  enabled: Boolean = false
) on QUERY

enum OneGraphExecutionStrategy {
  DYNAMIC
  PERSISTED
}

"""
Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
"""
enum OneGraphSubscriptionShowMetricsEnum {
  """Don't include any info"""
  NONE

  """Include summary info."""
  SUMMARY

  """Include summary metrics and full requests."""
  FULL_REQUESTS
}

input OneGraphSubscriptionPollScheduleRepeatInput {
  """How many minutes to wait before re-running the underlying query"""
  minutes: Int!
}

input OneGraphSubscriptionPollScheduleInput {
  """"""
  every: OneGraphSubscriptionPollScheduleRepeatInput!
}

"""

Optional authentication for making requests to the Gmail API if you want
to use a custom gmail app instead of OneGraph's built-in app.

Subscriptions are long-lived, so a refresh token must also be provided.

If you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.

"""
input OneGraphSubscriptionGmailAuthArg {
  refreshToken: String!
  accessToken: String!
}

"""Optional auth arg if not using OneGraph's built-in authentication"""
input OneGraphSubscriptionAuthArg {
  twilio: OneGraphTwilioAuth

  """
  
  Optional authentication for making requests to the Gmail API if you want
  to use a custom gmail app instead of OneGraph's built-in app.
  
  Subscriptions are long-lived, so a refresh token must also be provided.
  
  If you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.
  
  """
  gmail: OneGraphSubscriptionGmailAuthArg
}

type OneGraphSubscriptionPollingQueryDiffPrevious {
  payload: JSON
  createdAt: String
}

type OneGraphSubscriptionPollingQueryDiff {
  previous: OneGraphSubscriptionPollingQueryDiffPrevious
}

type PollingQuery {
  query: Query!
  diff: OneGraphSubscriptionPollingQueryDiff!
}

type Subscription {
  poll(
    """
    Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
    """
    showMetrics: OneGraphSubscriptionShowMetricsEnum

    """
    When set, OneGraph will run the query on the specified schedule, but will only deliver new payloads when the underlying query result has changed from the previous result. Use this when you only want to react to changes.
    
    When unset, OneGraph will run the query on the specified schedule, and will deliver a new payload regardless of whether it has changed from the previous runs. Use this when you want to reliably drive a process at a regular interval or monitor a value over time.
    """
    onlyTriggerWhenPayloadChanged: Boolean = true
    schedule: OneGraphSubscriptionPollScheduleInput!
    secret: OneGraphSubscriptionSecretInput
    auth: OneGraphSubscriptionAuthArg

    """
    Number of days to retain the payload, if `retainPayloads` is true, or `retainedOnly` is true. Maximum is 365, minimum is 1. Defaults to 365.
    """
    payloadRetentionDays: Int

    """
    Set to true to have OneGraph store payloads for this subscription. They payloads are available on the OneGraph dashboard from the app's `Subscription` page. Use this field when creating a subscription over a websocket that should only be retained and not sent over the websocket or a webhook.
    """
    retainedOnly: Boolean
    retainPayloads: Boolean

    """
    Webhook URL that will receive a POST request every time there is new data for the subscription. The endpoint should return a 200 within 30 seconds to be considered successful. If the request does not succeed, it will be retried.
    """
    webhookUrl: String
  ): PollingQuery!
}

input SignoutServicesData {
  authlifyTokenId: String

  """
  Auths to establish the anchor. Note that these auths won't be removed from the personal token.
  """
  anchorAuth: OneGraphServiceAuths
  services: [OneGraphServiceEnum!]!
}

input OneGraphSignoutServiceUserInput {
  """
  Foreign user id for the user you want to sign out. You can find the foreignUser id through me.serviceMetadata.loggedInServices
  """
  foreignUserId: String!

  """Service that you want to sign out of."""
  service: OneGraphServiceEnum!
}

type SignoutServicesResponsePayload {
  me: Viewer!
}

input OneGraphCreateSharedDocumentInput {
  """Optional example variables to include with the document."""
  exampleVariables: JSON

  """A short title for the operation. Maximum length is 256 characters."""
  title: String

  """A description for the operation. Maximum length is 2096 characters."""
  description: String

  """
  The Netlify siteId that this operation should be associated with. The currently-authenticated user must have access to this site in Netlify.
  """
  siteId: String

  """The shared operation text. Maximum length is 1mb."""
  body: String!
}

type OneGraphCreateSharedDocumentResponsePayload {
  """The shared document that was created."""
  sharedDocument: OneGraphSharedDocument!
}

input OneGraphCreateNetlifyTestEventDataInput {
  payload: JSON!
}

input OneGraphCreateNetlifyTestEvent {
  data: OneGraphCreateNetlifyTestEventDataInput!
  sessionId: String!
}

type OneGraphCreateNetlifyTestResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphCreateNetlifyLogEventDataInput {
  message: String!
}

input OneGraphCreateNetlifyLogEvent {
  data: OneGraphCreateNetlifyLogEventDataInput!
  sessionId: String!
}

type OneGraphCreateNetlifyLogResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphDeleteNetlifyCliSessionInput {
  """The id of the session."""
  sessionId: String!
}

type OneGraphDeleteNetlifyCliSessionResponsePayload {
  """The session that was deleted."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphUpdateNetlifyCliSessionInput {
  """Mark the session active or inactive"""
  status: OneGraphNetlifyCliSessionStatus

  """Optional metadata for the session"""
  metadata: JSON

  """An optional name for the session"""
  name: String

  """The id of the session"""
  id: String!
}

type OneGraphUpdateNetlifyCliSessionResponsePayload {
  """The session that was updated."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphCreateNetlifyCliSessionInput {
  """Status for the session. Defaults to ACTIVE."""
  status: OneGraphNetlifyCliSessionStatus = ACTIVE

  """Optional metadata for the session"""
  metadata: JSON

  """An optional name for the session"""
  name: String
  appId: String!
}

type OneGraphCreateNetlifyCliSessionResponsePayload {
  """The session that was created."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphAckNetlifyCliEventsInput {
  eventIds: [String!]!
  sessionId: String!
}

type OneGraphAckNetlifyCliEventsResponsePayload {
  """The list of events that were acknowledged"""
  events: [OneGraphNetlifyCliSessionEvent!]!
}

input OneGraphModifySchemaTokenInput {
  """Id for the app that you want to modify the schema for."""
  appId: String!
}

type OneGraphCreateModifySchemaTokenResponsePayload {
  """The access token that can be used to modify the app's schema."""
  accessToken: OneGraphAccessToken!
}

input OneGraphForkGraphQLSchemaEnabledServicesChangesInput {
  """
  Replace services with the given list of services. Can not be combined with add or remove.
  """
  replace: [OneGraphServiceEnumArg!]

  """Services to remove from the schema."""
  remove: [OneGraphServiceEnumArg!]

  """Services to add to the schema."""
  add: [OneGraphServiceEnumArg!]
}

input OneGraphForkGraphQLSchemaExternalGraphQLSchemaChangesInput {
  """The external GraphQL schemas to remove from the GraphQL schema."""
  remove: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]

  """The external GraphQL schemas to add to the GraphQL schema."""
  add: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]
}

input OneGraphForkGraphQLSchemaSalesforceChangesInput {
  """
  Whether to create a GraphQL schema with the custom salesforce schema removed. Can not be true if `setSalesforceSchemaId` is non-null.
  """
  removeCustomSalesforceSchema: Boolean

  """The id of a Salesforce schema to attach to the GraphQL schema."""
  setSalesforceSchemaId: String
}

input OneGraphForkGraphQLSchemaChangesInput {
  enabledServices: OneGraphForkGraphQLSchemaEnabledServicesChangesInput
  externalGraphQLSchemas: OneGraphForkGraphQLSchemaExternalGraphQLSchemaChangesInput
  salesforceSchema: OneGraphForkGraphQLSchemaSalesforceChangesInput
}

input OneGraphForkGraphQLSchemaInput {
  """The changes to apply to the schema."""
  changes: OneGraphForkGraphQLSchemaChangesInput!

  """
  Whether to set this schema as the default for the app. Defaults to false.
  """
  setAsDefaultForApp: Boolean = false

  """
  Whether to fork the default schema for the app. If `parentId is provided, this arg will be ignored.
  """
  forkAppDefaultSchema: Boolean = true

  """
  The optional id of the GraphQL schema to fork. If not provided, and `forkAppDefaultSchema` is set to true, the current default graphQLSchema for the app will be used. If there is no current default, then a global default graphQLSchema will be created and this schema will have no parent.
  """
  parentId: String

  """The id of the app that the schema should belong to."""
  appId: String!
}

type OneGraphForkGraphQLSchemaResponsePayload {
  graphQLSchema: OneGraphGraphQLSchema!
  app: OneGraphApp!
}

input OneGraphGraphQLSchemaExternalGraphQLSchemaInput {
  """The id of the external GraphQL schema."""
  externalGraphQLSchemaId: String!
}

input OneGraphCreateGraphQLSchemaInput {
  """
  Whether to set this schema as the default for the app. Defaults to false.
  """
  setAsDefaultForApp: Boolean = false

  """External GraphQL schemas to add"""
  externalGraphQLSchemas: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]

  """Optional id of a Salesforce schema to attach to the GraphQL schema."""
  salesforceSchemaId: String

  """The optional id of the GraphQL schema that this was derived from."""
  parentId: String

  """
  The list of services that this schema should use. Leave blank if you want to add support for all supported services.
  """
  enabledServices: [OneGraphServiceEnumArg!]

  """The id of the app that the schema should belong to."""
  appId: String!
}

type OneGraphCreateGraphQLSchemaResponsePayload {
  graphqlSchema: OneGraphGraphQLSchema! @deprecated(reason: "use graphQLSchema")
  graphQLSchema: OneGraphGraphQLSchema!
  app: OneGraphApp!
}

input OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput {
  name: String!
  netlifySiteId: String!
}

type OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphUpsertAppForNetlifySiteInput {
  netlifySiteId: String!
}

type OneGraphUpsertAppForNetlifySiteResponsePayload {
  """The app that is associated with the Netlify site."""
  app: OneGraphApp!

  """The app that is associated with the Netlify account."""
  org: OneGraphOrg!
}

input OneGraphCreateEmptyAccessTokenInput {
  """
  Number of seconds until the token should expire. Providing a value that is over two weeks of seconds will cause the request to be rejected
  """
  expiresIn: Int = 1209600
}

type OneGraphCreateEmptyAccessTokenPayload {
  """Access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphRemoveExternalHoneycombConfigInput {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!
}

type OneGraphRemoveExternalHoneycombConfigPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp
}

input OneGraphUpdateExternalHoneycombConfigInput {
  """
  If `true`, OneGraph will send events to Honeycomb. Set to `false` to stop sending metrics.
  """
  active: Boolean

  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]

  """Honeycomb token with the ability to create datasets and send events."""
  token: String

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphUpdateExternalHoneycombConfigPayload {
  """App that the Honeycomb config belongs to."""
  app: OneGraphApp

  """The Honeycomb config that was updated."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphAddExternalHoneycombConfigDatasetInput {
  """
  The name of the dataset that the events will be pushed to in Honeycomb.
  """
  datasetName: String!
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!
}

input OneGraphAddExternalHoneycombConfigInput {
  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]!

  """Honeycomb token with the ability to create datasets and send events."""
  token: String!

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphAddExternalHoneycombConfigPayload {
  """App that the Honeycomb config was added to."""
  app: OneGraphApp

  """The Honeycomb config that was added."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphRemoveSlackEventWebhookInput {
  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphRemoveSlackEventWebhookPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was removed."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belonged to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSetSlackEventWebhookSigningSecretInput {
  """Slack app-level token with the authorizations:read scope."""
  signingSecret: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookSigningSecretPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSetSlackEventWebhookAppTokenInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookAppTokenPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphAddSlackEventWebhookInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Slack event subscription webhook signing secret."""
  signingSecret: String!

  """Unique id for the app's Slack custom OAuth credentials."""
  serviceAuthId: String!

  """App to add the slack event webhook to."""
  appId: String!
}

type OneGraphAddSlackEventWebhookPayload {
  """App that the slack event webhook was added to."""
  app: OneGraphApp

  """The slack event webhook that was added."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook was added to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphRemoveGoogleSiteVerificationInput {
  """Id of the app to remove the Google Site Verification from."""
  appId: String!
}

type OneGraphRemoveGoogleSiteVerificationPayload {
  """App that the google site verification is being removed from."""
  app: OneGraphApp
}

input OneGraphAddGoogleSiteVerificationInput {
  """The body that Google will expect at the endpoint"""
  body: String!

  """The path that Google will crawl to check the site verification"""
  path: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddGoogleSiteVerificationPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The google site verification that was added."""
  googleSiteVerification: OneGraphGoogleSiteVerification!
}

type OneGraphAddSalesforceSchemaForSalesforceViewerPayload {
  """The salesforce schema that was created."""
  salesforceSchema: OneGraphSalesforceSchema!
}

type OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload {
  """The salesforce schema that was created."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphRemoveSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphRemoveSalesforceSchemaPayload {
  """App that the Salesforce schema was removed from."""
  app: OneGraphApp

  """The Salesforce schema that was removed."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphUpdateSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphUpdateSalesforceSchemaPayload {
  """App that the Salesforce schema was added to."""
  app: OneGraphApp

  """The Salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddSalesforceSchemaInput {
  """App to add the salesforce schema to."""
  appId: String!
}

type OneGraphAddSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphPromotePreviewSalesforceSchemaInput {
  """The id of the salesforce schema to promote."""
  salesforceSchemaId: String!

  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphPromotePreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was promoted."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddPreviewSalesforceSchemaInput {
  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphAddPreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The preview salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!

  """The GraphQL schema for the app after the preview schema is applied."""
  previewSchema: JSON! @deprecated(reason: "Use `createGraphQLSchema`, then fetch the new schema with a http call to `/schema?schema_id={schemaId}`")

  """The current GraphQL schema for the app."""
  currentSchema: JSON! @deprecated(reason: "Use a http call to `/schema`")
}

input OneGraphRemoveExternalGraphQLSchemaInput {
  """Id of the external schema to update."""
  id: String!
}

type OneGraphRemoveExternalGraphQLSchemaPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp

  """The external schema that was removed."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphUpdateExternalGraphQLSchemaInput {
  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """Id of the external schema to update."""
  id: String!
}

type OneGraphUpdateExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphAddExternalGraphQLSchemaInput {
  """Endpoint to make GraphQL queries against."""
  service: OneGraphSupportedExternalGraphQLService!

  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphEnableGitHubAppWebhookInput {
  serviceAuthId: String!
}

type OneGraphEnableGitHubAppWebhookResponsePayload {
  """Custom OAuth Client that was updated"""
  serviceAuth: OneGraphServiceAuth!

  """GitHub app webhook that was created"""
  gitHubAppWebhook: OneGraphGitHubAppWebhook!
}

type OneGraphSignoutResponsePayload {
  me: Viewer!
}

"""A OneGraph SignIn result"""
type OneGraphSignInResult {
  """
  The accessToken that can be used to make requests on behalf of the OneGraph user
  """
  accessToken: OneGraphAccessToken
}

input OneGraphDisableAuthGuardianSlackIntegrationInput {
  appId: String!
}

type OneGraphDisableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphEnableAuthGuardianSlackIntegrationInput {
  authToken: String!
  channel: String!
  appId: String!
}

type OneGraphEnableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput {
  """The id of the delegation."""
  id: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult {
  """The App that delegation was disabled for."""
  app: OneGraphApp!
}

input OneGraphDisableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was enabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was enabled for."""
  repoOwner: String!
}

input OneGraphEnableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphEnableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was disabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was disabled for."""
  repoOwner: String!
}

"""Scope"""
enum OneGraphApiTokenScopeEnum {
  MODIFY_SCHEMA
  PERSIST_QUERY
}

input OneGraphCreateApiTokenTokenInput {
  scopes: [OneGraphApiTokenScopeEnum!]!

  """Id for the app that you will be accessible through the token."""
  appId: String!
}

type OneGraphCreateApiTokenResponsePayload {
  """The access token that was created"""
  accessToken: OneGraphAccessToken!
}

input OneGraphEvictCachedPersistedQueryResultsInput {
  """The operationName of the cached result."""
  operationName: String

  """
  Variables values that must match. Note that this specifies the *minimum* of the match: even if there are *additional* variables in the cached query that weren't provided here, if the cached query successfully matches *at least* the variables provided here, the result will be removed from the cache.
  """
  variables: JSON

  """The id of the persisted query."""
  docId: String!

  """Id for the app that the query was persisted on."""
  appId: String!
}

type OneGraphEvictCachedResultsResponsePayload {
  docId: String!
}

input OneGraphDeletePersistedQueryInput {
  id: String!
  appId: String!
}

type OneGraphDeletePersistedQueryResponsePayload {
  app: OneGraphApp!
}

input OneGraphPersistedQueryTokenInput {
  """Id for the app that you want to persist queries on."""
  appId: String!
}

type OneGraphCreatePersitQueryTokenResponsePayload {
  """The access token that can be used to persist queries"""
  accessToken: OneGraphAccessToken!
}

input OneGraphUpdatePersistedQueryInput {
  """Replace the current tags on the query with the provided tags."""
  replaceTags: [String!]

  """Tags to remove from the query"""
  removeTags: [String!]

  """Tags to add to the query."""
  addTags: [String!]

  """A new description for the query."""
  description: String
  accessToken: String

  """The id of the app that the persisted query belongs to."""
  appId: String!

  """The id of the persisted query."""
  id: String!
}

type OneGraphUpdatedPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

input OneGraphCreatePersistedQueryParentInput {
  """
  An optional list of tags to remove from the parent query. If any of the provided tags aren't present on the parent, the mutation will fail. No persisted queries will be created and no tags will be removed from the parent.
  """
  removeTags: [String!]

  """The id of the parent"""
  id: String!
}

input OneGraphPersistedQueryCacheStrategyArg {
  """Number of seconds to cache the query result for."""
  timeToLiveSeconds: Float!
}

input OneGraphCreatePersistedQueryInput {
  """
  The parent persisted query. It can be used to track lineage of the query.
  """
  parent: OneGraphCreatePersistedQueryParentInput

  """
  A description for the persisted query. Maximum length is 2096 characters.
  """
  description: String

  """
  List of tags to add to the persisted query. Tags are free-form text that can be used to categorize persisted queries. Each tag must be under 256 characters and there can be a maximum of 10 tags on a single persisted query.
  """
  tags: [String!]
  accessToken: String

  """
  If set to true, and there was a successful execution of the query in the last 30 days, then the last successful result will be returned if we encounter any error when executing the query. If we do not have a previous successful result, then the response with the error will be returned.
  
  Note that the fallback result will be returned even in the case of partial success.
  
  This parameter is useful when you expect that your queries might be rate-limited by the underlying service.
  
  The query must provide a cache strategy in order to use `fallbackOnError`.
  """
  fallbackOnError: Boolean
  cacheStrategy: OneGraphPersistedQueryCacheStrategyArg

  """
  Operation names to allow. If not provided, then all operations in the document are allowed.
  """
  allowedOperationNames: [String!]
  fixedVariables: JSON
  freeVariables: [String!]
  query: String!
  appId: String!
}

type OneGraphPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

enum OneGraphDataVitualizationSupportedServiceArg {
  GMAIL
}

input OneGraphStartDataVirtualizationInput {
  """
  Account ID to enable the service for. Must match the currently logged in account id
  """
  accountId: String!

  """Service to enable data virtualization for"""
  service: OneGraphDataVitualizationSupportedServiceArg!
}

"""
Information about data virtualization that has been enabled for a service 
"""
type OneGraphDataVirtualizationDetails {
  accountId: String!
  graphQLEndpoint: String!
  service: String!
}

type OneGraphStartDataVirtualizationPayload {
  """Organization that was updated by this mutation"""
  dataVirutalizationDetails: OneGraphDataVirtualizationDetails!
}

input OneGraphUpdateAppByIdPatch {
  """New name for the app"""
  name: String!
}

input OneGraphUpdateAppByIdInput {
  """New fields for the app"""
  patch: OneGraphUpdateAppByIdPatch!

  """Id of the app"""
  id: String!
}

type OneGraphUpdateAppByIdResponsePayload {
  """App that was updated by this mutation"""
  app: OneGraphApp!
}

input OneGraphUpdateOrgByIdPatch {
  """New name for the organization"""
  name: String!
}

input OneGraphUpdateOrgByIdInput {
  """New fields for the organization"""
  patch: OneGraphUpdateOrgByIdPatch!

  """Id of the organization"""
  id: String!
}

type OneGraphUpdateOrgByIdResponsePayload {
  """Organization that was updated by this mutation"""
  org: OneGraphOrg!
}

input OneGraphCreateOrgInput {
  """Name for the organization"""
  name: String!
}

type OneGraphCreateOrgResponsePayload {
  """Organization that was created by this mutation"""
  org: OneGraphOrg!
}

input OneGraphCreateShortenedUrlInput {
  operation: String
  description: String
  name: String
  variables: String
  query: String!
}

type OneGraphShortenUrlResponsePayload {
  shortenedUrl: OneGraphShortenedQuery!
}

input OneGraphPersistAuthsInput {
  """
  Optional OneGraph accessToken to add the auths to. If not provided, OneGraph will look for a Bearer token in the Authorization header.
  """
  accessToken: String
  auths: OneGraphServiceAuths!
}

type OneGraphPersistAuthsResponsePayload {
  me: Viewer!
}

input OneGraphAddAuthsToPersonalTokenInput {
  authlifyTokenId: String

  """
  Auths to establish the anchor. Note that these auths won't be added to the personal token.
  """
  anchorAuth: OneGraphServiceAuths
  appId: String!

  """
  Token that will be destroyed and have its auths moved to the personal token.
  """
  sacrificialToken: String!
  personalToken: String
}

type OneGraphAddAuthsToPersonalTokenResponsePayload {
  """Personal access token that was updated by this mutation"""
  accessToken: OneGraphAccessToken!

  """OneGraph user"""
  oneUser: OneGraphUser
}

input OneGraphDeletePersonalTokenInput {
  appId: String!
  accessToken: String!
}

type OneGraphDeletePersonalTokenResponsePayload {
  """OneGraph user"""
  oneUser: OneGraphUser!
}

input OneGraphCreatePersonalTokenInput {
  anchor: OneGraphAccessTokenAnchorEnum = ONEGRAPH_USER
  appId: String!
  accessToken: String!
  name: String!
}

type OneGraphCreatePersonalTokenResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!

  """OneGraph user"""
  oneUser: OneGraphUser
}

"""Fields to change on a subscription."""
input OneGraphGraphQLSubscriptionUpdateInputPatch {
  """The new variables to replace the existing query variables."""
  variables: JSON

  """The new query to replace the existing subscription query."""
  query: String!
}

input OneGraphSubscriptionSecretInput {
  """
  A hex-encoded key that will be used to sign all webhooks sent from this subscription.
  
  You can use the signature to validate that the subscription was sent from OneGraph.
  
  The signature will be sent in the `X-OneGraph-Signature` header of the webhook. The header will contain two parts, a signature and a timestamp (in seconds since the epoch), in the following format:
  
  ```
  X-OneGraph-Signature: t=1582852002,hmac_sha256=7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a
  ```
  
  To verify the signature:
  1. Extract the timestamp (1582852002 above)
  2. Extract the signature (7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a above)
  3. Concatenate the timestamp and the request body, separeted by a period (e.g. `t + '.' + requestBody`)
  4. Compute the hmac_sha256 hash of (3)
  5. Compare the hash with the provided signature using a constant-time comparison function (e.g. crypto.timingSafeEqual in Node)
  6. Reject the request if the hash you computed does not match the provided signature or if the timestamp is too far in the past (typically, 5 minutes)
  
  Example for validating the body in Node.js:
  
  ```js
  const SECRET = 'your hmacSha256Key';
  const signature = res.get('X-OneGraph-Signature');
  if (!signature) {
    throw new Error('Missing signature');
  }
  
  const sig = {};
  for (const pair of signature.split(',')) {
    const [k, v] = pair.split('=');
    sig[k] = v;
  }
  
  if (!sig.t || !sig.hmac_sha256) {
    throw new Error('Invalid signature header');
  }
  
  const hash = crypto
    .createHmac('sha256', SECRET)
    .update(sig.t)
    .update('.')
    .update(res.body)
    .digest('hex');
  
  if (
    !crypto.timingSafeEqual(
      Buffer.from(hash, 'hex'),
      Buffer.from(sig.hmac_sha256, 'hex'),
    )
  ) {
    throw new Error('Invalid signature');
  }
  
  if (parseInt(sig.t, 10) < Date.now() / 1000 - 300 /* 5 minutes */) {
    throw new Error('Request is too old');
  }
  
  // Signature is valid
  ```
  
  Examples for creating the key:
  
  Cli:
  ```cli
  $ openssl rand -hex 32
  ```
  
  Node:
  ```js
  require('crypto').randomBytes(32).toString('hex');
  ```
  
  Ruby:
  ```ruby
  ruby -rsecurerandom -e 'puts SecureRandom.hex(32)'
  ```
  """
  hmacSha256Key: String
}

input OneGraphGraphQLSubscriptionUpdateInput {
  """The fields of the subscription to update."""
  patch: OneGraphGraphQLSubscriptionUpdateInputPatch!

  """
  The signing secret that the subscription was created with. Note that this will not update the existing secret.
  """
  secret: OneGraphSubscriptionSecretInput
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionUpdateResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

input OneGraphGraphQLSubscriptionUnsubscribeInput {
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionUnsubscribeResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

input OneGraphDestroyServiceAuthInput {
  serviceAuthId: String!
  appId: String!
}

type OneGraphDestroyServiceAuthResponsePayload {
  """Service auth that was destroyed by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

"""
Services OneGraph supports providing a custom clientId/clientSecret for.
"""
enum OneGraphCustomServiceAuthServiceEnum {
  ADROLL
  ASANA
  BOX
  CLOUDINARY
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SLACK
  SPOTIFY
  STRIPE
  TWITCH_TV
  TWILIO
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  TRELLO
  TWITTER
}

input OneGraphCreateServiceAuthInput {
  """
  Whether to use a fixed redirect url, i.e. `/oauth/receive` instead of `/oauth/github/receive`. Defaults to `false`.
  """
  useFixedRedirectUri: Boolean = false

  """Custom cname for the custom OAuth client."""
  cname: String

  """Custom redirect URI."""
  customRedirectUri: String

  """
  Whether the user who created the token should be able to fetch it from OneGraph. Defaults to false.
  """
  revealTokens: Boolean = false

  """Optional list of scopes to use for your app."""
  scopes: [String!]

  """App name for trello. Required to use custom Trello credentials."""
  trelloAppName: String

  """
  Developer token for the Google Ads api. This param is required for using custom OAuth credentials for Google Ads.
  
  A developer token from Google allows your app to connect to the Google Ads API. To retrieve your developer token, sign in to your Manager Account. You must be signed-in to a Google Ads Manager Account before continuing.
  
  Navigate to TOOLS & SETTINGS > SETUP > API Center. The API Center option will appear only for Google Ads Manager Accounts.
  
  If your developer token is pending approval, you can start developing immediately with the pending token you received during sign up, using a test manager account.
  
  Your pending developer token must be approved before using it with production Google Ads accounts.
  """
  googleDeveloperToken: String

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String
  clientSecret: String!
  clientId: String!
  service: OneGraphCustomServiceAuthServiceEnum!
  appId: String!
}

type OneGraphCreateServiceAuthResponsePayload {
  """Service auth that was created by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

input OneGraphRemoveNetlifySiteFromAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input OneGraphAddNetlifySiteToAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveCustomCorsOriginFromAppInput {
  customCorsOrigin: String!
  appId: String!
}

type OneGraphRemoveCustomCorsOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveCORSOriginFromAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphRemoveCORSOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphAddCORSOriginToAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphAddCORSOriginToAppResponsePayload {
  app: OneGraphApp!
}

input SetAppCORSOriginsData {
  corsOrigins: [String!]!
  appId: String!
}

type SetAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

enum OneGraphQueryChainIfMissingEnum {
  ERROR
  ALLOW
  SKIP
}

enum OneGraphQueryChainIfListEnum {
  FIRST
  LAST
  ALL
  EACH
}

input OneGraphQueryChainArgumentDependencyInput {
  functionFromScript: String!
  maxRecur: Int = 1
  ifMissing: OneGraphQueryChainIfMissingEnum
  ifList: OneGraphQueryChainIfListEnum
  fromRequestIds: [String!]!
  name: String!
}

input OneGraphQueryChainVariableInput {
  value: JSON
  name: String!
}

input OneGraphQueryChainRequestInput {
  argumentDependencies: [OneGraphQueryChainArgumentDependencyInput!] = []
  variables: [OneGraphQueryChainVariableInput!] = []

  """The query to run. Must provide one of `query` or `operationName`."""
  query: String

  """
  The operationName of the query in the document to run. Must provide one of `query` or `operationName`.
  """
  operationName: String

  """
  The id of the query. If you provide a script in the argument dependencies for a request that depends on this query, the data from this query will be provided as `{"$ID": query-result}`.  This will typically be the same as the operation name, but could be different if your chain needs to use the same query in multiple requests.
  """
  id: String!
}

"""
Dependencies from npm. Only allows packages that don't have any dependencies of their own. Packages that rely on filesystem APIs may not work. Must provide the exact version string.
"""
input OneGraphQueryChainScriptDependencyInput {
  """
  The package's version string, e.g. `4.17.21`. Only accepts exact version strings.
  """
  version: String!

  """The name of the package, e.g. `lodash`."""
  name: String!
}

input OneGraphQueryChainInput {
  """
  If true, will copy errors from the `OneGraphQueryChainMutationResult.result` field to the top-level `errors` field. Defaults to true.
  """
  liftErrors: Boolean = true
  requests: [OneGraphQueryChainRequestInput!]!
  scriptDependencies: [OneGraphQueryChainScriptDependencyInput!]
  script: String
}

type OneGraphQueryChainMutationArgumentDependencyError {
  """The name of the error"""
  name: String

  """The error message"""
  message: String

  """The error stack, as a string"""
  stackString: String
}

type OneGraphQueryChainMutationArgumentDependencyConsoleLog {
  """The log level, `debug`, `info`, `warn`, or `error`"""
  level: String!

  """The log body."""
  body: [JSON!]!
}

type OneGraphQueryChainMutationArgumentDependencyResult {
  """The name of the argument dependency"""
  name: String!

  """The return values of the argument dependency script."""
  returnValues: [JSON!]

  """Logs captured by calling `console.log` in the script."""
  logs: [OneGraphQueryChainMutationArgumentDependencyConsoleLog!]!

  """Error, if there was an error evaluating the script."""
  error: OneGraphQueryChainMutationArgumentDependencyError
}

type OneGraphQueryChainRequest {
  """The id of the request"""
  id: String!
}

type OneGraphQueryChainMutationResult {
  """The request."""
  request: OneGraphQueryChainRequest!

  """Debug information for the argument dependencies"""
  argumentDependencies: [OneGraphQueryChainMutationArgumentDependencyResult!]!

  """The result of the query"""
  result: [JSON]!
}

type OneGraphQueryChainMutationPayload {
  results: [OneGraphQueryChainMutationResult!]!
}

"""Tours for exploring OneGraph"""
enum OneGraphTourEnum {
  DASHBOARD
  QUERYCHAIN
  AUTHGUARDIAN
}

input OneGraphCompleteTourData {
  tour: OneGraphTourEnum!
}

type OneGraphCompleteTourResponsePayload {
  me: Viewer!
}

input OneGraphUnLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphUnLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

input OneGraphLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

"""GraphQL types that support linking"""
enum OneGraphServiceLinkGraphQLTypeEnum {
  GitHubIssue
  GitHubIssueComment
  GitHubUser
  HubspotContact
  IntercomUser
  SalesforceAccount
  SalesforceCase
  SalesforceCaseComment
  SalesforceContact
  SalesforceFeedComment
  SalesforceFeedItem
  SalesforceLead
  SalesforceUser
  StripeCustomer
  StripeRefund
  ZendeskUser
}

input OneGraphServiceLinkNodeArg {
  id: String!
  type: OneGraphServiceLinkGraphQLTypeEnum!
}

input OneGraphCreateServiceLinkArg {
  endNode: OneGraphServiceLinkNodeArg!
  startNode: OneGraphServiceLinkNodeArg!
}

type OneGraphServiceLinkNode {
  type: String!
  id: String!
}

type OneGraphCreateServiceLinkResponsePayload {
  startNode: OneGraphServiceLinkNode!
  endNode: OneGraphServiceLinkNode!
}

input OneGraphDangerouslySignJwtPayloadInput {
  expiresInSeconds: Int = 300
  includeBaseFields: Boolean = true
  payload: JSON!
}

type OneGraphDangerouslySignJwtPayloadResponsePayload {
  encoded: String!
}

input OneGraphSetAppNetlifySiteNamesInput {
  netlifySiteNames: [String!]!
}

type OneGraphSetAppNetlifySiteNamesResponsePayload {
  app: OneGraphApp!
}

input OneGraphSetAuthGuardianActiveInput {
  active: Boolean!
}

type OneGraphSetAuthGuardianActiveResponsePayload {
  app: OneGraphApp
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnumArg {
  HMAC_256
  RSA_256
}

input OneGraphSetJwtSigningAlgorithmAndSecretInput {
  """
  When using symmetric (HMAC) algorithms, this is the shared secret OneGraph will use to sign the generated JSON web tokens.
  """
  sharedSecret: String

  """
  When generating a JWT for SSO, OneGraph can sign the JSON tokens with either a shared-secret (symmetric) key (HMAC) or a public/private (asymmetric) key pair (RSA)
  """
  signingAlgorithm: OneGraphJwtSigningAlgorithmEnumArg!
}

type OneGraphSetJwtSigningAlgorithmAndSecretPayload {
  app: OneGraphApp!
}

input OneGraphSetJwtPreflightQueryAndWebhookUrlInput {
  """
  An optional GraphQL query to run after a user has signed into any service. The result will be included in the body for the preflight webhook. You may want to use this to retrieve a user's Google subId, or a list of GitHub organization names a user belongs.
  """
  preflightQuery: String

  """
  When generating a JWT for SSO using OneGraph to authenticate
                  with third-parties, you can run an optional GraphQL query and
                  send the result to a webhook for preprocessing before OneGraph
                  signs the final token and passes it to the client
  """
  webhookUrl: String
}

type OneGraphSetAppJwtPreflightQueryResponsePayload {
  app: OneGraphApp!
}

"""Mutations related to apps"""
type OneGraphAppMutations {
  setCORSOrigins(corsOrigins: [String!]!): OneGraphApp!
  setJwtPreflightQueryAndWebhookUrl(input: OneGraphSetJwtPreflightQueryAndWebhookUrlInput!): OneGraphSetAppJwtPreflightQueryResponsePayload
  setJwtSigningAlgorithmAndSecret(input: OneGraphSetJwtSigningAlgorithmAndSecretInput!): OneGraphSetJwtSigningAlgorithmAndSecretPayload
  setAuthGuardianActive(input: OneGraphSetAuthGuardianActiveInput!): OneGraphSetAuthGuardianActiveResponsePayload
  setAuthGuardian(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload
  setNetlifySiteNames(input: OneGraphSetAppNetlifySiteNamesInput!): OneGraphSetAppNetlifySiteNamesResponsePayload!

  """
  Use this when you need to generate a JWT (JSON web token) with a valid signature based on the JWT algorithm settings for your app. For example, you might want to test out a token within the Hasura console, on your Netlify site, or against your own GraphQL server without going through a full auth flow manually.
  
  By default these tokens will only be valid for 5 minutes (300 seconds).
  
  Note that these tokens will be signed and valid, and will be accepted *anywhere* you have configured. **Treat them as secure tokens and guard them!**
  """
  dangerouslySignJwtPayload(input: OneGraphDangerouslySignJwtPayloadInput!): OneGraphDangerouslySignJwtPayloadResponsePayload
}

"""Mutations for the currently authed user"""
type OneGraphMutation {
  app(id: String!): OneGraphAppMutations @deprecated(reason: "Use setAppCORSOrigins")
  createServiceLink(data: OneGraphCreateServiceLinkArg!): OneGraphCreateServiceLinkResponsePayload!
  linkOneGraphNodes(input: OneGraphLinkOneGraphNodesInput!): OneGraphLinkOneGraphNodesResponsePayload!
  unLinkOneGraphNodes(input: OneGraphUnLinkOneGraphNodesInput!): OneGraphUnLinkOneGraphNodesResponsePayload!
  completeTour(data: OneGraphCompleteTourData!): OneGraphCompleteTourResponsePayload!
  createApp(
    """`id` of the organization that this app should belong to"""
    orgId: String!
    corsOrigins: [String!]!
    description: String
    name: String!
  ): OneGraphApp!
  executeChain(input: OneGraphQueryChainInput!): OneGraphQueryChainMutationPayload!
  setAppCORSOrigins(data: SetAppCORSOriginsData!): SetAppCORSOriginsResponsePayload!
  addCORSOriginToApp(input: OneGraphAddCORSOriginToAppInput!): OneGraphAddCORSOriginToAppResponsePayload!
  removeCORSOriginFromApp(input: OneGraphRemoveCORSOriginFromAppInput!): OneGraphRemoveCORSOriginFromAppResponsePayload!
  removeCustomCorsOriginFromApp(input: OneGraphRemoveCustomCorsOriginFromAppInput!): OneGraphRemoveCustomCorsOriginFromAppResponsePayload!
  addNetlifySiteToAppCORSOrigins(input: OneGraphAddNetlifySiteToAppCORSOriginsInput!): OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload!
  removeNetlifySiteFromAppCORSOrigins(input: OneGraphRemoveNetlifySiteFromAppCORSOriginsInput!): OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload!
  createServiceAuth(data: OneGraphCreateServiceAuthInput!): OneGraphCreateServiceAuthResponsePayload!
  destroyServiceAuth(data: OneGraphDestroyServiceAuthInput!): OneGraphDestroyServiceAuthResponsePayload!
  subscriptionUnsubscribe(data: OneGraphGraphQLSubscriptionUnsubscribeInput!): OneGraphGraphQLSubscriptionUnsubscribeResponsePayload!
  updateSubscription(input: OneGraphGraphQLSubscriptionUpdateInput!): OneGraphGraphQLSubscriptionUpdateResponsePayload!
  createPersonalToken(input: OneGraphCreatePersonalTokenInput!): OneGraphCreatePersonalTokenResponsePayload!
  deletePersonalToken(input: OneGraphDeletePersonalTokenInput!): OneGraphDeletePersonalTokenResponsePayload!
  addAuthsToPersonalToken(input: OneGraphAddAuthsToPersonalTokenInput!): OneGraphAddAuthsToPersonalTokenResponsePayload!
  persistAuths(input: OneGraphPersistAuthsInput!): OneGraphPersistAuthsResponsePayload!
  createShortenedUrl(input: OneGraphCreateShortenedUrlInput!): OneGraphShortenUrlResponsePayload!
  createOrg(input: OneGraphCreateOrgInput!): OneGraphCreateOrgResponsePayload!
  updateOrgById(input: OneGraphUpdateOrgByIdInput!): OneGraphUpdateOrgByIdResponsePayload!
  updateAppById(input: OneGraphUpdateAppByIdInput!): OneGraphUpdateAppByIdResponsePayload!
  enableDataVirtualization(input: OneGraphStartDataVirtualizationInput!): OneGraphStartDataVirtualizationPayload!
  createPersistedQuery(input: OneGraphCreatePersistedQueryInput!): OneGraphPersistedQueryResponsePayload!
  updatePersistedQuery(input: OneGraphUpdatePersistedQueryInput!): OneGraphUpdatedPersistedQueryResponsePayload!
  createPersitQueryToken(input: OneGraphPersistedQueryTokenInput!): OneGraphCreatePersitQueryTokenResponsePayload!
  deletePersistedQuery(input: OneGraphDeletePersistedQueryInput!): OneGraphDeletePersistedQueryResponsePayload!
  evictCachedPersistedQueryResults(input: OneGraphEvictCachedPersistedQueryResultsInput!): OneGraphEvictCachedResultsResponsePayload!
  createApiToken(input: OneGraphCreateApiTokenTokenInput!): OneGraphCreateApiTokenResponsePayload!

  """
  Allows non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  enableGitHubRepositorySubscriptionDelegation(input: OneGraphEnableGithubRepositorySubscriptionDelegationInput!): OneGraphEnableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  disableGitHubRepositorySubscriptionDelegation(input: OneGraphDisableGithubRepositorySubscriptionDelegationInput!): OneGraphDisableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph. Allows the owner of the app on OneGraph to remove delegation for a repo.
  """
  disableGitHubRepositorySubscriptionDelegationById(input: OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput!): OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult!
  enableAuthGuardianSlackIntegration(input: OneGraphEnableAuthGuardianSlackIntegrationInput!): OneGraphEnableAuthGuardianSlackIntegrationResponsePayload
  disableAuthGuardianSlackIntegration(input: OneGraphDisableAuthGuardianSlackIntegrationInput!): OneGraphDisableAuthGuardianSlackIntegrationResponsePayload
  destroyApp(id: String!): OneGraphApp
  saveQuery(public: Boolean, enabled: Boolean, tags: [String!]!, description: String, name: String!, body: String!): OneGraphQuery!
  updateQuery(public: Boolean, enabled: Boolean, tags: [String!], name: String, id: String!): OneGraphQuery
  destroyQuery(version: String!, name: String!): OneGraphQuery!
  signUp(agreeToTOS: Boolean!, passwordConfirm: String!, password: String!, email: String!, fullName: String!): OneGraphSignInResult!
  signIn(rememberMe: Boolean!, password: String!, email: String!): OneGraphSignInResult!
  agreeToTos(userAgreesToTheOneGraphTermsOfService: Boolean!): OneGraphUser!
  signOut: OneGraphSignoutResponsePayload!

  """
  Revokes a OneGraph access token, refresh token, or JWT. After a token is destroyed, it can no longer be used to authenticate with OneGraph.
  
  If you destroy a JWT, external services that rely on the claims embedded in the JWT may still accept the JWT and you will also have to revoke the JWT though the external service's revocation process.
  """
  destroyToken(
    """An Authlify Token identifier"""
    authlifyTokenId: String

    """Any OneGraph access token, refresh token, or JWT"""
    token: String
  ): Boolean!
  exchangeGitHubContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeNetlifyContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeZeitContextForOneGraphAccessToken: OneGraphSignInResult!
  associateOneGraphUserWithGitHubAccount: OneGraphUser!
  associateOneGraphUserWithNetlifyAccount: OneGraphUser!
  requestPasswordReset(email: String!): String!
  resetPassword(passwordConfirm: String!, password: String!, token: String!): Boolean!
  enableGitHubAppWebhook(input: OneGraphEnableGitHubAppWebhookInput!): OneGraphEnableGitHubAppWebhookResponsePayload!
  addExternalGraphQLSchema(input: OneGraphAddExternalGraphQLSchemaInput!): OneGraphAddExternalGraphQLSchemaPayload!
  updateExternalGraphQLSchema(input: OneGraphUpdateExternalGraphQLSchemaInput!): OneGraphUpdateExternalGraphQLSchemaPayload! @deprecated(reason: "use `createExternalGraphQLSchema` first, then `createGraphQLSchema` with the result")
  removeExternalGraphQLSchema(input: OneGraphRemoveExternalGraphQLSchemaInput!): OneGraphRemoveExternalGraphQLSchemaPayload! @deprecated(reason: "Use createGraphQLSchema")
  addPreviewSalesforceSchema(input: OneGraphAddPreviewSalesforceSchemaInput!): OneGraphAddPreviewSalesforceSchemaPayload! @deprecated(reason: "Use `addSalesforceSchema`, then `createGraphQLSchema`.")
  promotePreviewSalesforceSchema(input: OneGraphPromotePreviewSalesforceSchemaInput!): OneGraphPromotePreviewSalesforceSchemaPayload! @deprecated(reason: "")
  addSalesforceSchema(input: OneGraphAddSalesforceSchemaInput!): OneGraphAddSalesforceSchemaPayload!
  updateSalesforceSchema(input: OneGraphUpdateSalesforceSchemaInput!): OneGraphUpdateSalesforceSchemaPayload!
  removeSalesforceSchema(input: OneGraphRemoveSalesforceSchemaInput!): OneGraphRemoveSalesforceSchemaPayload!
  addPreviewSalesforceSchemaForSalesforceViewer: OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload! @deprecated(reason: "use `addSalesforceSchemaForSalesforceViewer`, then `createGraphQLSchema`.")
  addSalesforceSchemaForSalesforceViewer: OneGraphAddSalesforceSchemaForSalesforceViewerPayload!
  addGoogleSiteVerification(input: OneGraphAddGoogleSiteVerificationInput!): OneGraphAddGoogleSiteVerificationPayload!
  removeGoogleSiteVerification(input: OneGraphRemoveGoogleSiteVerificationInput!): OneGraphRemoveGoogleSiteVerificationPayload!
  addSlackEventWebhook(input: OneGraphAddSlackEventWebhookInput!): OneGraphAddSlackEventWebhookPayload!
  setSlackEventWebhookAppToken(input: OneGraphSetSlackEventWebhookAppTokenInput!): OneGraphSetSlackEventWebhookAppTokenPayload!
  setSlackEventWebhookSigningSecret(input: OneGraphSetSlackEventWebhookSigningSecretInput!): OneGraphSetSlackEventWebhookSigningSecretPayload!
  removeSlackEventWebhook(input: OneGraphRemoveSlackEventWebhookInput!): OneGraphRemoveSlackEventWebhookPayload!
  addExternalHoneycombConfig(input: OneGraphAddExternalHoneycombConfigInput!): OneGraphAddExternalHoneycombConfigPayload!
  updateExternalHoneycombConfig(input: OneGraphUpdateExternalHoneycombConfigInput!): OneGraphUpdateExternalHoneycombConfigPayload!
  removeExternalHoneycombConfig(input: OneGraphRemoveExternalHoneycombConfigInput!): OneGraphRemoveExternalHoneycombConfigPayload!
  createEmptyAccessToken(input: OneGraphCreateEmptyAccessTokenInput!): OneGraphCreateEmptyAccessTokenPayload!
  upsertAppForNetlifySite(input: OneGraphUpsertAppForNetlifySiteInput!): OneGraphUpsertAppForNetlifySiteResponsePayload!

  """Creates an empty personal token with a Netlify site anchor"""
  createPersonalTokenWithNetlifySiteAnchor(input: OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput!): OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload!
  createGraphQLSchema(input: OneGraphCreateGraphQLSchemaInput!): OneGraphCreateGraphQLSchemaResponsePayload!
  forkGraphQLSchema(input: OneGraphForkGraphQLSchemaInput!): OneGraphForkGraphQLSchemaResponsePayload!
  createModifySchemaToken(input: OneGraphModifySchemaTokenInput!): OneGraphCreateModifySchemaTokenResponsePayload!

  """
  Acknowledge a set of netlify CLI events for a session. All events must be for the same session.
  """
  ackNetlifyCliEvents(input: OneGraphAckNetlifyCliEventsInput!): OneGraphAckNetlifyCliEventsResponsePayload!

  """Create a new CLI session."""
  createNetlifyCliSession(input: OneGraphCreateNetlifyCliSessionInput!): OneGraphCreateNetlifyCliSessionResponsePayload!

  """Update a CLI session."""
  updateNetlifyCliSession(input: OneGraphUpdateNetlifyCliSessionInput!): OneGraphUpdateNetlifyCliSessionResponsePayload!

  """Delete a CLI session."""
  deleteNetlifyCliSession(input: OneGraphDeleteNetlifyCliSessionInput!): OneGraphDeleteNetlifyCliSessionResponsePayload!
  createNetlifyCliLogEvent(input: OneGraphCreateNetlifyLogEvent!): OneGraphCreateNetlifyLogResponsePayload!
  createNetlifyCliTestEvent(input: OneGraphCreateNetlifyTestEvent!): OneGraphCreateNetlifyTestResponsePayload!

  """Create a shared document"""
  createSharedDocument(input: OneGraphCreateSharedDocumentInput!): OneGraphCreateSharedDocumentResponsePayload!
}

type Mutation {
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphMutation!
  testMutate(query: String!): Boolean!
  signoutServiceUser(input: OneGraphSignoutServiceUserInput!): SignoutServicesResponsePayload!
  signoutServices(data: SignoutServicesData!): SignoutServicesResponsePayload!
}

input OneGraphSharedDocumentsModerationStatusFilter {
  equalTo: OneGraphSharedDocumentModerationStatusEnum
}

input OneGraphSharedDocumentsServicesFilter {
  in: [OneGraphServiceEnumArg!]
  equalTo: OneGraphServiceEnumArg
}

input OneGraphSharedDocumentsFilter {
  moderationStatus: OneGraphSharedDocumentsModerationStatusFilter
  services: OneGraphSharedDocumentsServicesFilter
}

"""A list of shared documents"""
type OneGraphSharedDocumentConnection {
  nodes: [OneGraphSharedDocument!]!
}

"""Moderation status"""
enum OneGraphSharedDocumentModerationStatusEnum {
  PUBLISHED
  UNPUBLISHED
}

type OneGraphSharedDocument {
  """The id of the shared document"""
  id: String!

  """The siteId that the shared document originated from"""
  siteId: String

  """A short, descriptive title explaining what the document does."""
  title: String

  """The text of the GraphQL document"""
  body: String!

  """Services that appear in the query"""
  services: [OneGraphServiceInfo!]!

  """Operation name"""
  operationName: String

  """Document description"""
  description: String

  """Example variables for the operation."""
  exampleVariables: JSON

  """Current moderation status of the query"""
  moderationStatus: OneGraphSharedDocumentModerationStatusEnum!

  """Timestamp the document was created, in rfc3339 format."""
  createdAt: String!

  """Timestamp the document was last updated, in rfc3339 format."""
  updatedAt: String!
}

"""The status of a cli session"""
enum OneGraphNetlifyCliSessionStatus {
  ACTIVE
  INACTIVE
  UNCLAIMED
  TERMINATED
}

type OneGraphNetlifyCliSession {
  id: String!
  appId: String!
  netlifyUserId: String!
  name: String
  events(
    """The number of events to fetch, maximum of 1000."""
    first: Int = 1000
  ): [OneGraphNetlifyCliSessionEvent!]!
  createdAt: String!
  updatedAt: String!
  lastEventAt: String
  metadata: JSON
  status: OneGraphNetlifyCliSessionStatus!

  """Number of milliseconds to wait between heartbeats"""
  cliHeartbeatIntervalMs: Int!
}

type OneGraphNetlifyCliSessionLogEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  message: String!
}

type OneGraphNetlifyCliSessionTestEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  payload: JSON!
}

interface OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
}

type AuthlifyToken {
  """Metadata and logged-in state for all OneGraph services"""
  serviceMetadata: OneGraphServicesMetadata!
}

input OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  name: String!
}

"""
Commonly used values for use in JWT generation, like GitHub email address or the current time.
"""
enum OneGraphAuthGuardianBuiltInValue {
  CONTENTFUL_AVATAR_URL
  CONTENTFUL_USER_ID
  CONTENTFUL_EMAIL
  EGGHEADIO_AVATAR_URL
  EGGHEADIO_USER_ID
  EGGHEADIO_EMAIL
  EGGHEADIO_IS_PRO
  EGGHEADIO_IS_INSTRUCTOR
  EGGHEADIO_IS_COMMUNITY_MEMBER
  GITHUB_AVATAR_URL
  GITHUB_EMAIL
  GITHUB_LOGIN
  GITHUB_NAME
  GITHUB_USER_ID
  GITHUB_FULL_EMAILS
  GMAIL_EMAIL
  GMAIL_EMAIL_VERIFIED
  GMAIL_USER_ID
  LOGGED_IN_SERVICES
  NETLIFY_AVATAR_URL
  NETLIFY_EMAIL
  NETLIFY_FULL_NAME
  NETLIFY_USER_ID
  NOW_SECONDS
  NOW_MILLISECONDS
  NOW_TIMESTAMP
  SALESFORCE_EMAIL
  SALESFORCE_USER_ID
  SPOTIFY_EMAIL
  SPOTIFY_USER_ID
  STRIPE_ACCOUNT_ID
  STRIPE_ACCOUNT_PRIMARY_EMAIL
  TWITCH_TV_EMAIL
  TWITCH_TV_DISPLAY_NAME
  TWITCH_TV_LOGO_URL
  TWITCH_TV_USER_ID
  TWITTER_IS_VERIFIED
  TWITTER_EMAIL
  TWITTER_NAME
  TWITTER_PROFILE_IMAGE_URL
  TWITTER_SCREEN_NAME
  TWITTER_USER_ID
  VERCEL_AVATAR_URL
  VERCEL_EMAIL
  VERCEL_NAME
  VERCEL_USER_ID
}

input OneGraphSetAuthGuardianRuleEffectJsonValueInput {
  json: String
  builtInValue: OneGraphAuthGuardianBuiltInValue
}

input OneGraphSetAuthGuardianRuleEffectSetValueInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  path: String!
}

input OneGraphSetAuthGuardianRuleEffectInput {
  onExpressJsAddPermissions: [String!]
  onApolloServerAddRoles: [String!]
  onNetlifyAddUserRoles: [String!]
  onHasuraSetUserId: OneGraphSetAuthGuardianRuleEffectJsonValueInput
  onHasuraSetDefaultRole: String
  onHasuraSetSessionVariable: OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput
  onHasuraAddRoles: [String!]
  inTheJsonAddToListAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
  inTheJsonRemoveValueAtPath: String
  inTheJsonSetValueAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
}

input OneGraphSetAuthGuardianRuleConditionZeitInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionTwitterInput {
  hasTwitterVerifiedStatus: Boolean
  screenName: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
}

input OneGraphSetAuthGuardianRuleConditionTwitchTvInput {
  loginStatus: Boolean
  hasVerifiedEmail: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionStripeInput {
  loginStatus: Boolean
  hasAPrimaryAccountEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
  hasAnAccountIdThat: OneGraphSetAuthGuardianRuleStringConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSpotifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSalesforceInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionNetlifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGmailInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGitHubInput {
  isCollaboratorOnRepositoryWhereFullName: String
  isMemberOfOrganizationNamed: String
  hasStarredARepositoryWithAFullNameOf: String
  hasCommittedToRepositoryWithAFullNameOf: String
  login: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionEggheadioInput {
  isCommunityMember: Boolean
  isInstructor: Boolean
  isPro: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleStringConditionInput {
  isEqualToCaseInsensitively: String
  containsCaseInsensitively: String
  endsWithCaseInsensitively: String
  startsWithCaseInsensitively: String
  isEqualTo: String
  contains: String
  endsWith: String
  startsWith: String
}

input OneGraphSetAuthGuardianRuleEmailConditionInput {
  isEqualTo: String
  hasADomainThat: OneGraphSetAuthGuardianRuleStringConditionInput
  endsWith: String
  startsWith: String
}

input OneGraphSetAuthGuardianRuleConditionContentfulInput {
  confirmed: Boolean
  activated: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionInput {
  vercel: OneGraphSetAuthGuardianRuleConditionZeitInput
  twitter: OneGraphSetAuthGuardianRuleConditionTwitterInput
  twitch: OneGraphSetAuthGuardianRuleConditionTwitchTvInput
  stripe: OneGraphSetAuthGuardianRuleConditionStripeInput
  spotify: OneGraphSetAuthGuardianRuleConditionSpotifyInput
  salesforce: OneGraphSetAuthGuardianRuleConditionSalesforceInput
  netlify: OneGraphSetAuthGuardianRuleConditionNetlifyInput
  gmail: OneGraphSetAuthGuardianRuleConditionGmailInput
  gitHub: OneGraphSetAuthGuardianRuleConditionGitHubInput
  eggheadio: OneGraphSetAuthGuardianRuleConditionEggheadioInput
  contentful: OneGraphSetAuthGuardianRuleConditionContentfulInput
  always: Boolean
}

input OneGraphSetAuthGuardianRuleInput {
  effects: [OneGraphSetAuthGuardianRuleEffectInput!]!
  conditions: [OneGraphSetAuthGuardianRuleConditionInput!]!
}

input OneGraphSetAuthGuardianInput {
  rules: [OneGraphSetAuthGuardianRuleInput!]!
}

type OneGraphSetAuthGuardianResponsePayload {
  javascript: String
  graphQL: String
  jwt: String
  rules: JSON
}

"""A OneGraph Server Info"""
type OneGraphServerInfo {
  """"""
  sha: String!

  """"""
  buildNumber: Int!
}

"""Customizations to a OneGraph schema."""
type OneGraphGraphQLSchema {
  id: String!
  appId: String!
  parentGraphQLSchemaId: String
  parentGraphQLSchema: OneGraphGraphQLSchema
  services: [OneGraphServiceInfo!]!
  salesforceSchema: OneGraphSalesforceSchema

  """External GraphQL schemas for the schema."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection!
  createdAt: String!
  updatedAt: String!
}

enum OneGraphExternalHoneycombConfigDatasetMetricTypeEnum {
  API_CALL
  SUBSCRIPTION_DELIVERY
}

type OneGraphExternalHoneycombConfigDataset {
  """The metric type."""
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!

  """The name of the dataset in Honeycomb."""
  datasetName: String!
}

type OneGraphExternalHoneycombConfig {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!

  """The datetime that the Honecomb config was added, in rfc3339 format."""
  createdAt: String!

  """
  The datetime that the Honeycomb config was last updated, in rfc3339 format.
  """
  updatedAt: String!

  """The Honeycomb API token that OneGraph will use to send events."""
  obfuscatedToken: String!

  """If `true`, OneGraph will send events to Honeycomb."""
  active: Boolean!

  """The last error we received while sending events to the Honeycomb API."""
  lastError: String

  """User-provided dataset names"""
  datasets: [OneGraphExternalHoneycombConfigDataset!]!
}

type OneGraphGoogleSiteVerification {
  """The root path that this will be served at."""
  path: String!

  """The content that will be served at the path."""
  body: String!
}

type OneGraphSalesforceSchema {
  """Id of the salesforce schema"""
  id: String!

  """The id of the OneGraph app that the salesforce schema belongs to."""
  appId: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Salesforce instanceUrl"""
  instanceUrl: String!

  """Salesforce Organization ID"""
  salesforceOrgId: String

  """Whether this is a preview of a change to a Salesforce schema."""
  isPreview: Boolean! @deprecated(reason: "There is no longer a distinction between preview and non-preview salesforce schemas. Use `createGraphQLSchema` with `salesforceSchemaId` to get a schema you can test with.")

  """The previous salesforce schema, if there was one."""
  previousSalesforceSchema: OneGraphSalesforceSchema
}

enum OneGraphSupportedExternalGraphQLService {
  GRAPHCMS
  WORDPRESS
}

type OneGraphExternalGraphQLSchema {
  """Id of the external graphql schema"""
  id: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Service of the external graphql schema"""
  service: OneGraphSupportedExternalGraphQLService!

  """GraphQL endpoint of the external graphql schema"""
  endpoint: String!
}

type OneGraphExternalGraphQLSchemaConnection {
  nodes: [OneGraphExternalGraphQLSchema!]!
}

type OneGraphGithubRepositorySubscriptionDelegate {
  id: String!

  """Name with owner (e.g. onegraph/graphiql-exporer) of the GitHub repo."""
  nameWithOwner: String!

  """
  Datetime that the repo was set up to allow non-admin subscriptions (rfc3339 encoded)
  """
  createdAt: String!
}

type OneGraphGithubRepositorySubscriptionDelegateConnection {
  nodes: [OneGraphGithubRepositorySubscriptionDelegate!]!
}

"""Persisted query"""
type OneGraphPersistedQuery {
  """The persisted query's id."""
  id: String!

  """The persisted query's query string."""
  query: String!

  """The default variables provided to the query."""
  fixedVariables: JSON

  """
  The list of variables that the caller of the query is allowed to provide.
  """
  freeVariables: [String!]

  """
  The list of operation names that the caller of the query is allowed to execute. If the field is null, then all operationNames are allowed.
  """
  allowedOperationNames: [String!]

  """The list of user-defined tags that were added to the query"""
  tags: [String!]

  """The user-defined description that was added to the query"""
  description: String

  """The parent of this query, if it has one."""
  parent: OneGraphPersistedQuery
}

"""List of persisted queries."""
type OneGraphPersistedQueryConnection {
  """List of persisted queries."""
  nodes: [OneGraphPersistedQuery!]!

  """Pagination information"""
  pageInfo: PageInfo!
}

"""A custom cors origin"""
type OneGraphCustomCorsOrigin {
  """The friendly service name for the cors origin"""
  friendlyServiceName: String!

  """
  The name of the origin that should be displayed, e.g. oneblog for oneblog.netlify.app.
  """
  displayName: String!

  """The encoded value as a string, used to remove the custom cors origin."""
  encodedValue: String!
}

type OneGraphAppAuthCompletedLog implements OneGraphAppLog {
  """
  Noted whenever an end-user has completed a login for a service when using this app
  """
  service: String!
  friendlyName: String!

  """The user id according to the service they logged into"""
  serviceUserId: String

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

type OneGraphAppLogJwtWebhookFailed implements OneGraphAppLog {
  """
  The destination webhook where we tried to deliver the JWT for preprocessing when it failed
  """
  destination: String!

  """The numeric HTTP status code we received from the webhook (if any)"""
  responseStatusCode: Int

  """The textual responseBody we received from the webhook (if any)"""
  responseBody: String
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

type OneGraphAppLogSubscriptionDeliveryFailed implements OneGraphAppLog {
  """The subscription for the failed delivery attempt"""
  subscription: OneGraphAppSubscription

  """The attempt number for delivering this subscription payload"""
  attempt: Int!
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

interface OneGraphAppLog {
  id: String!
  createdAt: String!
  friendlyName: String!
  jsonData(pretty: Boolean = false): String
}

type OneGraphAppLogConnection {
  """Applogs"""
  nodes: [OneGraphAppLog!]!
}

"""An RSA public key used for signing JWTs"""
type OneGraphAppJwtRsaPublicKey {
  """The algorithm associated with this public key"""
  algorithm: String!

  """The n of the rsa key"""
  n: String!

  """The exponent of the rsa key"""
  e: String!
}

"""An HMAC key used for signing JWTs"""
type OneGraphJwtSigningKeyHmac256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!

  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The shared secret for this key (if any)"""
  sharedSecret: String
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnum {
  HMAC_256
  RSA_256
}

"""The family of Signing algorithms"""
enum OneGraphSigningAlgorithmFamilyEnum {
  SYMMETRIC
  ASYMMETRIC
}

"""An RSA public key used for signing JWTs"""
type OneGraphJwtSigningKeyRsa256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

interface OneGraphJwtSigningKey {
  """The family of algorithms used for this key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

"""The method of generating JWTs"""
enum OneGraphAppJwtGenerationMethodEnum {
  MANUAL
  AUTH_BUILDER
}

"""JWT settings for the app, useful for SSO."""
type OneGraphAppJwtSettings {
  """A query to run on every user log in to use in generating the JWT token"""
  jwtPreflightQuery: String

  """
  An optional webhook to use for generating the full JWT. Use this and `jwtPreflightQuery` to customize claims. Very useful when used alongside e.g. Hasura or PostGraphile
  """
  jwtWebhookUrl: String

  """
  Whether this app is generating JWTs on login via a manual query/webhook combination, or using OneGraph's AuthGuardian
  """
  jwtGenerationMethod: OneGraphAppJwtGenerationMethodEnum!

  """
  The rules this app is configured to use when generating JWTs on user login
  """
  jwtAuthGuardianRules: JSON

  """The current key used to sign JWTs generated for this app"""
  activeKey: OneGraphJwtSigningKey

  """List of the public keys for an app"""
  publicKeys: [OneGraphAppJwtRsaPublicKey!]

  """The full JWT configuration for Hasura"""
  hasuraConfig: String

  """
  The public well-known JWK url of where to look for public keys when verifying JWT for this app
  """
  jwksUrl: String!
}

"""Status of the subscription"""
enum OneGraphAppSubscriptionsStatusEnumArg {
  ACTIVE
  INACTIVE
}

enum OneGraphAppSubscriptionPayloadDeliveryStatus {
  WAITING
  DELIVERING
  DELIVERED
  FAILED
}

"""Payload for a subscription created by the app"""
type OneGraphAppSubscriptionPayload {
  """Unique id for the payload."""
  id: String!

  """
  Body of the payload or null if the payload is expired. This is the full body of the GraphQL payload, including the `data`, `errors`, and `extensions` fields as JSON.
  """
  body: JSON!

  """
  `true` if the payload body has been deleted. Payload bodies will expire after 1 year.
  """
  isExpired: Boolean!

  """
  The time that this payload was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  The delivery status of a subscription, if the subscription has a destination.
  """
  deliveryStatus: OneGraphAppSubscriptionPayloadDeliveryStatus!

  """The number of times we attempted to deliver the payload."""
  deliveryAttempts: Int!

  """
  The last time we attempted to deliver the payload, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  lastDeliveryAttempt: String

  """
  The status code we received from the webhook destination the last time we attempted to deliver the payload. This field will be null for Websocket and Retain-only subscriptions.
  """
  lastStatusCode: Int

  """
  If there was an error delivering the payload to a webhook destination, this field will contain the first 512 bytes of the response we receieved from the server.
  """
  lastError: String
}

"""Payloads for a subscription"""
type OneGraphAppSubscriptionPayloadsConnection {
  """List of subscription payloads"""
  nodes: [OneGraphAppSubscriptionPayload!]!
}

"""Webhook destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebhookDestination {
  """Url that the webhook will deliver payloads to."""
  url: String!
}

"""Websocket destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebsocketDestination {
  """The client-side id for the subscription."""
  clientId: String!
}

"""
Destination for a OneGraph subscription that is only retained and not delivered.
"""
type OneGraphAppSubscriptionRetainedOnlyDestination {
  retainedOnly: Boolean!
}

union OneGraphAppSubscriptionDestination = OneGraphAppSubscriptionRetainedOnlyDestination | OneGraphAppSubscriptionWebsocketDestination | OneGraphAppSubscriptionWebhookDestination

"""Information about a subscription to Salesforce."""
type OneGraphSalesforceSubscriptionInfo {
  """
  The Id of the Salesforce Organization that this subscription is subscription to
  """
  organizationId: String!
}

"""Information about a subscription to gmail."""
type OneGraphGmailWatch {
  """Email address that is being watched."""
  emailAddress: String!
}

"""Subscription created by the app"""
type OneGraphAppSubscription {
  """Unique id for the subscription."""
  id: String!

  """Status of the subscription."""
  status: String!

  """Query that the subscription run."""
  query: String!

  """
  If this is a subscription to Gmail, contains extra information about the Gmail subscription
  """
  gmailWatch: OneGraphGmailWatch

  """
  If this is a subscription to Salesforce, contains extra information about the Salesforce subscription
  """
  salesforceInfo: OneGraphSalesforceSubscriptionInfo

  """Destination for the subscription payloads"""
  destination: OneGraphAppSubscriptionDestination!

  """Reason why this subscription can't be updated if it can't be updated."""
  updatesUnsupportedReason: String

  """The variables that this query was saved with."""
  requestVariables: JSON

  """
  The time that this subscription was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  Whether this subscription retains payloads. Payloads are available through the `payload` field on the subscription.
  """
  retainPayloads: Boolean!

  """
  Latest payloads for a subscription, if the subscription was created with `retainPayloads` set to true.
  """
  payloads(
    """Number of payloads to fetch. Defaults to 20, maximum is 100."""
    first: Int = 20
  ): OneGraphAppSubscriptionPayloadsConnection
}

"""
Subscriptions created by the app, with extra information about pagination.
"""
type OneGraphAppSubscriptionsConnection {
  """Pagination information."""
  pageInfo: PageInfo!

  """List of subscriptions created by the app."""
  nodes: [OneGraphAppSubscription!]!
}

"""Custom OAuth client for Adroll"""
type OneGraphAdrollServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Asana"""
type OneGraphAsanaServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Box"""
type OneGraphBoxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Cloudinary"""
type OneGraphCloudinaryServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Contentful"""
type OneGraphContentfulServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Dev.to"""
type OneGraphDevToServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Docusign"""
type OneGraphDocusignServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Dribbble"""
type OneGraphDribbbleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Dropbox"""
type OneGraphDropboxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Egghead.io"""
type OneGraphEggheadioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Eventil"""
type OneGraphEventilServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Facebook"""
type OneGraphFacebookServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Firebase"""
type OneGraphFirebaseServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

type OneGraphGitHubAppWebhook {
  signingSecret: String!
  webhookUrl: String!
}

"""Custom OAuth client for GitHub"""
type OneGraphGitHubServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
  gitHubAppWebhook: OneGraphGitHubAppWebhook
}

"""Custom OAuth client for Gmail"""
type OneGraphGmailServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Gong"""
type OneGraphGongServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google"""
type OneGraphGoogleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Ads"""
type OneGraphGoogleAdsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Analytics"""
type OneGraphGoogleAnalyticsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Calendar"""
type OneGraphGoogleCalendarServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Compute"""
type OneGraphGoogleComputeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Docs"""
type OneGraphGoogleDocsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Search Console"""
type OneGraphGoogleSearchConsoleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Translate"""
type OneGraphGoogleTranslateServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Hubspot"""
type OneGraphHubspotServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Intercom"""
type OneGraphIntercomServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Mailchimp"""
type OneGraphMailchimpServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Meetup"""
type OneGraphMeetupServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Netlify"""
type OneGraphNetlifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Notion"""
type OneGraphNotionServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Outreach"""
type OneGraphOutreachServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Product Hunt"""
type OneGraphProductHuntServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for QuickBooks"""
type OneGraphQuickbooksServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Salesforce"""
type OneGraphSalesforceServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Sanity"""
type OneGraphSanityServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Slack Event Webhook for an app."""
type OneGraphSlackEventWebhook {
  """Unique identifier."""
  id: String!

  """Custom OAuth service id."""
  serviceAuthId: String!

  """
  The webhook url that should be set as the request url for your Slack app.
  """
  webhookUrl: String!

  """
  Last time that the webhook was verified by Slack, encoded as an []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example: `1985-04-12T23:20:50-00:00``.
  """
  verifiedAt: String

  """
  Date that the webhook was created, encoded as an []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example: `1985-04-12T23:20:50-00:00``.
  """
  createdAt: String!

  """The signing secret, masked."""
  maskedSigningSecret: String

  """The app token, masked."""
  maskedAppToken: String
}

"""Custom OAuth client for Slack"""
type OneGraphSlackServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
  slackEventWebhook: OneGraphSlackEventWebhook
}

"""Custom OAuth client for Spotify"""
type OneGraphSpotifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Stripe"""
type OneGraphStripeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Twitch"""
type OneGraphTwitchTvServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Twilio"""
type OneGraphTwilioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for You Need a Budget"""
type OneGraphYnabServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for YouTube"""
type OneGraphYoutubeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Vercel"""
type OneGraphZeitServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Zendesk"""
type OneGraphZendeskServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Trello"""
type OneGraphTrelloServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Twitter"""
type OneGraphTwitterServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for a service"""
interface OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""A OneGraph Org"""
type OneGraphOrg {
  """The id of the OneGraph Org"""
  id: String!

  """The name of the OneGraph Org"""
  name: String!

  """All OneGraph apps belonging to this organization"""
  apps: [OneGraphApp!]!
}

"""A OneGraph App"""
type OneGraphApp {
  """The id of the OneGraph App"""
  id: String!

  """The description of the OneGraph App"""
  description: String!

  """The subdomain of the OneGraph App"""
  subdomain: String!

  """The name of the OneGraph App"""
  name: String!

  """The origins allowed for this OneGraph App from CORS requests"""
  corsOrigins: [String!]!

  """The id of the OneGraph organization that this app belongs to"""
  orgId: String!

  """The OneGraph organization that this app belongs to"""
  org: OneGraphOrg

  """The queries belonging to this OneGraph app"""
  queries: [OneGraphQuery!]!

  """
  The custom clientId/clientSecret that have been set for services (e.g. Gmail and Slack) that belong to this OneGraph app
  """
  serviceAuths: [OneGraphServiceAuth!]!

  """Subscriptions created with this app"""
  subscriptions(
    """
    Fiter by the Subscription's Salesforce organization Id, if the subscription is to a change in Salesforce..
    """
    salesforceOrganizationId: String

    """
    Fiter by the Subscription's webhook url, if the destination is a webhook.
    """
    webhookUrl: String

    """Fiter by status of the subscription"""
    status: OneGraphAppSubscriptionsStatusEnumArg

    """Fetch items in the list after the specified cursor"""
    after: String

    """How many subsriptions to fetch"""
    first: Int = 25
  ): OneGraphAppSubscriptionsConnection!

  """The JWT settings for this app"""
  jwtSettings: OneGraphAppJwtSettings!

  """Activity related to this app"""
  auditLogs(
    """
    How many log items to pull from the front of the collection, maximum of `250`
    """
    first: Int = 10
  ): OneGraphAppLogConnection!

  """
  Sites on Netlify associated with this app. OneGraph will allow CORS and authentication redirects to all previews, branch, and production deploys of these sites.
  """
  netlifySiteNames: [String!]!

  """Custom cors origins"""
  customCorsOrigins: [OneGraphCustomCorsOrigin!]!

  """List of persisted queries for this app"""
  persistedQueries(
    """Only return persisted queries that have all of the provided tags."""
    tags: [String!]

    """Returns results after the provided cursor."""
    after: String

    """How many persisted queries to return. Defaults to 10, max 100."""
    first: Int = 10
  ): OneGraphPersistedQueryConnection!

  """GitHub repos for the app that can have subscriptions on OneGraph."""
  gitHubRepositorySubscriptionDelegates: OneGraphGithubRepositorySubscriptionDelegateConnection!

  """The Slack channel for AuthGuardian to post into upon user sign-in"""
  authGuardianSlackChannel: String

  """Whether the AuthGuardian Slack integration is enabled"""
  authGuardianSlackIntegrationEnabled: Boolean!

  """External GraphQL schemas for the app."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection! @deprecated(reason: "use graphQLSchema.externalGraphQLSchemas")

  """Custom Salesforce schema on the app's default graphQLSchema."""
  salesforceSchema: OneGraphSalesforceSchema @deprecated(reason: "use graphQLSchema.salesforceSchema")

  """
  The domain that must be authorized to receive push notifications from Google for Google Calendar subscriptions.
  """
  googleAuthorizedDomain: String!

  """Google Site Verification for the app"""
  googleSiteVerification: OneGraphGoogleSiteVerification

  """External Honeycomb config for the app"""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig

  """Customizations to the default GraphQL schema"""
  graphQLSchema: OneGraphGraphQLSchema
}

"""A query stored in Onegraph"""
type OneGraphQuery {
  """The id of the GraphQL query"""
  id: String!

  """The id of the app that this GraphQL query belongs to"""
  appId: String!

  """
  Whether a GraphQL query is globally enabled/disabled. Note that even if the query is enabled, a corresponding auth_token must share a tag with this query to use it.
  """
  enabled: Boolean!

  """
  Whether a GraphQL query is shared and publicly viewable, including all of its meta-information.
  """
  public: Boolean!

  """The version (currently a hash of the body) of the GraphQL query"""
  version: String!

  """The body of the GraphQL query"""
  body: String!

  """The name of the GraphQL query"""
  name: String!

  """An optional description of the GraphQL query"""
  description: String

  """The tags (for permissions and organization) of the GraphQL query"""
  tags: [String!]!

  """What time this query was created"""
  createdAtTs: String!

  """What time this query was created in milliseconds from the epoch"""
  createdAtMs: Int!
}

"""A query stored in OneGraph in shortened form for easy sharing"""
type OneGraphShortenedQuery {
  """The id of the shortened OneGraph query"""
  id: String!

  """The full query body of the shortened OneGraph query"""
  query: String!

  """The variables of the shortened OneGraph query"""
  variables: String

  """The pre-selected operation of the shortened OneGraph query"""
  operation: String

  """An optional description of the purpose of the query"""
  description: String

  """The optional short name for the shortened OneGraph query"""
  name: String

  """
  The fully-qualified url for the shortened OneGraph query, used for sharing
  """
  url: String!
}

input OneGraphServiceInfoServiceFilter {
  """Filter for services that are in the list of services"""
  in: [OneGraphServiceEnumArg!]
}

input OneGraphServiceInfoFilter {
  """Check for any expression in this list"""
  or: [OneGraphServiceInfoFilter!]

  """Filter by the service."""
  service: OneGraphServiceInfoServiceFilter

  """Filter for services that support Netlify Graph"""
  supportsNetlifyGraph: Boolean

  """Filter for services that support Netlify Api Authentication"""
  supportsNetlifyApiAuthentication: Boolean

  """Filter for services that support custom service auth"""
  supportsCustomServiceAuth: Boolean

  """Filter for services that support OAuth login"""
  supportsOauthLogin: Boolean
}

"""
Root fields for the OneGraph service. Used by OneGraph to build OneGraph.
"""
type OneGraphServiceQuery {
  services(filter: OneGraphServiceInfoFilter): [OneGraphServiceInfo!]!
  shortenedUrl(id: String!): OneGraphShortenedQuery
  queries: [OneGraphQuery!]!
  searchQueries(query: String!): [OneGraphQuery!]!
  apps: [OneGraphApp!]!
  app(
    """App id"""
    id: String!
  ): OneGraphApp!
  orgs: [OneGraphOrg!]!
  org(
    """Org id"""
    id: String!
  ): OneGraphOrg!
  serverInfo: OneGraphServerInfo!
  authGuardianPreview(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload

  """
  An identity function. The field will return whatever is provided as the input.
  """
  identity(
    """The input that should be returned."""
    input: JSON
  ): JSON

  """A graphql subscription."""
  graphQLSubscription(
    """The unique id for the app."""
    appId: String!

    """The unique id for the subscription."""
    id: String!
  ): OneGraphAppSubscription

  """Fetch a single persisted query by its id."""
  persistedQuery(
    """The id of the app that the persisted query belongs to."""
    appId: String!

    """The id of the persisted query."""
    id: String!
  ): OneGraphPersistedQuery!

  """Find a GraphQL schema by its id."""
  graphQLSchema(
    """The id of the app that the GraphQL schema belongs to."""
    appId: String!

    """The id of the GraphQL schema."""
    id: String!
  ): OneGraphGraphQLSchema!
  authlifyToken(authlifyTokenId: String!): AuthlifyToken!

  """Personal access token lookup"""
  personalToken(accessToken: String!): OneGraphAccessToken
  netlifyCliEvents(
    """The number of events to fetch. The maximum is 1000."""
    first: Int = 1000
    sessionId: String!
  ): [OneGraphNetlifyCliSessionEvent!]!

  """Netlify CLI sessions, orderd by createdAt descending."""
  netlifyCliSessionsByAppId(
    """The number of sessions to fetch. The maximum is 50."""
    first: Int = 10
    appId: String!
  ): [OneGraphNetlifyCliSession!]!

  """Get a Netlify CLI session by its id."""
  netlifyCliSession(id: String!): OneGraphNetlifyCliSession!

  """Get a sharedDocument by its id"""
  sharedDocument(id: String!): OneGraphSharedDocument!

  """Get sharedDocument"""
  sharedDocuments(
    """
    The number of shared documents to fetch. Defaults to 10, maximum of 100.
    """
    first: Int = 10
    filter: OneGraphSharedDocumentsFilter
  ): OneGraphSharedDocumentConnection!
}

input OneGraphServiceUserIds {
  """User id for Adroll"""
  adroll: String

  """User id for Asana"""
  asana: String

  """User id for Box"""
  box: String

  """User id for Cloudinary"""
  cloudinary: String

  """User id for Contentful"""
  contentful: String

  """User id for Dev.to"""
  devTo: String

  """User id for Docusign"""
  docusign: String

  """User id for Dribbble"""
  dribbble: String

  """User id for Dropbox"""
  dropbox: String

  """User id for Egghead.io"""
  eggheadio: String

  """User id for Eventil"""
  eventil: String

  """User id for Facebook"""
  facebookBusiness: String

  """User id for Firebase"""
  firebase: String

  """User id for GitHub"""
  gitHub: String

  """User id for Gmail"""
  gmail: String

  """User id for Gong"""
  gong: String

  """User id for Google"""
  google: String

  """User id for Google Ads"""
  googleAds: String

  """User id for Google Analytics"""
  googleAnalytics: String

  """User id for Google Calendar"""
  googleCalendar: String

  """User id for Google Compute"""
  googleCompute: String

  """User id for Google Docs"""
  googleDocs: String

  """User id for Google Search Console"""
  googleSearchConsole: String

  """User id for Google Translate"""
  googleTranslate: String

  """User id for Hubspot"""
  hubspot: String

  """User id for Intercom"""
  intercom: String

  """User id for Mailchimp"""
  mailchimp: String

  """User id for Meetup"""
  meetup: String

  """User id for Netlify"""
  netlify: String

  """User id for Notion"""
  notion: String

  """User id for Outreach"""
  outreach: String

  """User id for Product Hunt"""
  productHunt: String

  """User id for QuickBooks"""
  quickbooks: String

  """User id for Salesforce"""
  salesforce: String

  """User id for Sanity"""
  sanity: String

  """User id for Slack"""
  slack: String

  """User id for Spotify"""
  spotify: String

  """User id for Stripe"""
  stripe: String

  """User id for Twitch"""
  twitchTv: String

  """User id for Twilio"""
  twilio: String

  """User id for You Need a Budget"""
  ynab: String

  """User id for YouTube"""
  youTube: String

  """User id for Vercel"""
  zeit: String

  """User id for Zendesk"""
  zendesk: String

  """User id for Trello"""
  trello: String

  """User id for Twitter"""
  twitter: String
}

input OneGraphZendeskAPITokenAuth {
  token: String!
  email: String!
  subdomain: String!
}

input OneGraphUSPSAPIAuth {
  password: String
  userId: String!
}

input OneGraphUPSAPIAuth {
  accessToken: String!
  password: String!
  username: String!
}

input OneGraphTwilioAuth {
  authToken: String!
  accountSid: String!
}

input OneGraphTrelloTokenAuth {
  token: String!
  apiKey: String!
}

"""
Authenticate requests when using the Stripe API on behalf of a connected account using the Stripe-Account header and the connected account’s ID. https://stripe.com/docs/connect/authentication#stripe-account-header
"""
input OneGraphStripeConnectAuthArg {
  """Id of the connected account for which the request is being made."""
  connectedStripeAccountId: String!

  """Your platform account’s secret key."""
  platformSecretKey: String!
}

input OneGraphSalesforceOAuthArg {
  instanceUrl: String!
  token: String!
}

input OneGraphOrbitAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account Settings](https://app.orbit.love/user/edit) in your Orbit dashboard.
  """
  apiKey: String!
}

input OneGraphOpenCollectiveAuthArg {
  """
  For use with a API key. To generate an api key, see the [applications page](https://opencollective.com/applications) in your OpenCollective dashboard.
  """
  apiKey: String!
}

input OneGraphNpmBasicAuth {
  password: String!
  username: String!
}

input OneGraphNpmAuthArg {
  """
  An API or OAuth token with sufficient permissions to publish npm packages
  """
  apiToken: String

  """Basic username/password authentication"""
  basic: OneGraphNpmBasicAuth
}

input OneGraphNetlifyAuthArg {
  oauthToken: String!
}

input OneGraphMuxAPITokenAuthArg {
  secret: String!
  tokenId: String!
}

input OneGraphMuxAuthArg {
  """
  For advanced usage: if you have separately implemented the Mux OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a API access token. To generate an access token ID and secret, see the [settings page](https://dashboard.mux.com/settings/access-tokens) in your Mux dashboard. Will take priority over the `oauthToken` argument if both are provided.
  """
  accessToken: OneGraphMuxAPITokenAuthArg
}

input OneGraphLogdnaServiceAuthArg {
  """
  Service Key from LogDNA. Retrive a service key from [your profile](https://app.logdna.com/manage/profile) under API Keys > Service Keys.
  """
  serviceKey: String!
}

input OneGraphGoogleAdsAuthArg {
  oauthToken: String!

  """
  A developer token from Google allows your app to connect to the Google Ads API.
  
  To retrieve your developer token, sign in to your Manager Account. You must be signed-in to a Google Ads Manager Account before continuing. Navigate to TOOLS & SETTINGS > SETUP > API Center."
  """
  developerToken: String!
}

input OneGraphGongBasicAuthArg {
  accessKeySecret: String!
  accessKey: String!
}

input OneGraphGongAuthArg {
  """
  For advanced usage: if you have separately implemented the Gong OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  In the [Gong API Page](https://app.gong.io/company/api) (you must be a technical administrator in Gong), click `Create` to receive an Access Key and an Access Key Secret.
  """
  basic: OneGraphGongBasicAuthArg
}

input OneGraphFedexAPIAuth {
  meterNumber: String!
  accountNumber: String!
  password: String!
  key: String!
}

input OneGraphDevToAuthArg {
  """
  For advanced usage: if you have separately implemented the Dev.to OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a personal API token, see the [Dev.to authentication](https://docs.dev.to/api/#section/Authentication/api_key) docs on generating a token. Will take priority over the `oauthToken` argument if both are provided.
  """
  apiKey: String
}

input OneGraphCloudflareUserAuthArg {
  key: String!
  email: String!
}

input OneGraphChagebeeAuthArg {
  """
  A [Chargebee API key](https://www.chargebee.com/docs/2.0/api_keys.html). To create a key go to **Settings** > **Configure Chargebee** > **API Keys and Webhooks** and then click on the **API Keys** tab.
  """
  apiKey: String!

  """
  The [chargebee site](https://www.chargebee.com/docs/2.0/sites-intro.html). 
  """
  site: String!
}

input OneGraphApolloAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account Settings](https://app.apollo.love/user/edit) in your Apollo dashboard.
  """
  apiKey: String!
}

input OneGraphServiceAuths {
  zendeskAPITokenAuth: OneGraphZendeskAPITokenAuth
  zeitOAuthToken: String
  youtubeOAuthToken: String

  """
  A Wordpress bearer token. This arg is compatible with the `authToken` that is passed as an `Authorization` header in [wp-graphql-jwt-authentication plugin](https://github.com/wp-graphql/wp-graphql-jwt-authentication), or any other plugin that uses a bearer token in the `Authorization` header. 
  """
  wordpressBearerToken: String
  uspsAPIAuth: OneGraphUSPSAPIAuth
  upsAPIAuth: OneGraphUPSAPIAuth
  twilioAuth: OneGraphTwilioAuth
  trelloTokenAuth: OneGraphTrelloTokenAuth
  stripeOAuthToken: String
  stripeConnectAuth: OneGraphStripeConnectAuthArg
  spotifyOAuthToken: String
  slackOAuthToken: String
  salesforceOAuth: OneGraphSalesforceOAuthArg
  productHuntOAuthToken: String
  orbit: OneGraphOrbitAuthArg
  openCollective: OneGraphOpenCollectiveAuthArg
  onegraphToken: String
  npmAuth: OneGraphNpmAuthArg
  netlifyAuth: OneGraphNetlifyAuthArg
  muxAuth: OneGraphMuxAuthArg
  mixpanelApiSecret: String
  logdnaServiceAuth: OneGraphLogdnaServiceAuthArg
  intercomOAuthToken: String
  hubspotOAuthToken: String
  graphCmsToken: String
  googleTranslateOAuthToken: String
  googleSearchConsoleOAuthToken: String
  googleMapsKey: String
  googleDocsOAuthToken: String
  googleComputeOAuthToken: String
  googleCalendarOAuthToken: String
  googleAdsAuth: OneGraphGoogleAdsAuthArg
  googleOAuthToken: String
  gongAuth: OneGraphGongAuthArg
  gmailOAuthToken: String
  gitHubOAuthToken: String
  firebaseOAuthToken: String
  fedexAPIAuth: OneGraphFedexAPIAuth
  facebookOAuthToken: String
  dropboxOAuthToken: String
  dribbbleOAuthToken: String
  devToAuth: OneGraphDevToAuthArg
  crunchbaseUserKey: String
  cloudflareUserAuth: OneGraphCloudflareUserAuthArg
  clearbitAuth: String
  chargebee: OneGraphChagebeeAuthArg
  brexAuth: String
  apollo: OneGraphApolloAuthArg
  airtableApiKey: String
}

"""
The anchor is like two-factor auth for the token. It ensures that the person who adds auth to the token is the same as the person who created the token.
"""
enum OneGraphAccessTokenAnchorEnum {
  """
  Use the logged in OneGraph user. The user must be logged in to the OneGraph dashboard to use this option.
  """
  ONEGRAPH_USER

  """
  Use the logged in Netlify user. The token must have an active Netlify auth to use this option.
  """
  NETLIFY_USER

  """Use the provided Netlify site."""
  NETLIFY_SITE
}

"""Custom data for a OneGraph user auth."""
type OneGraphUserAuthCustomDataForOneGraph {
  """AppId that the tokens applies to."""
  appId: String
}

"""Service-specific data for a user auth."""
union OneGraphUserAuthCustomData = OneGraphUserAuthCustomDataForOneGraph

"""A user auth associated with an access token"""
type OneGraphUserAuth {
  """Service that the auth belongs to."""
  service: OneGraphServiceEnum!

  """Unique id for the logged-in entity on the service."""
  foreignUserId: String!

  """Scopes granted for the service."""
  scopes: [String!]

  """Service-specific data for the user auth"""
  customData: OneGraphUserAuthCustomData
}

"""A OneGraph Access Token"""
type OneGraphAccessToken {
  """Bearer token"""
  token: String!

  """
  Time that the the token expires, measured in seconds since the Unix epoch
  """
  expireDate: Int!

  """Token name, if it is a personal access token"""
  name: String

  """AppId that the token belongs to"""
  appId: String!

  """User auths for the access token"""
  userAuths: [OneGraphUserAuth!]!

  """
  The anchor is like two-factor auth for the token. It ensures that the person who adds auth to the token is the same as the person who created the token.
  """
  anchor: OneGraphAccessTokenAnchorEnum

  """Netlify-specific ID for the token"""
  netlifyId: String
}

"""The settings for a OneGraph User"""
type OneGraphUserSettings {
  """The tours completed by this OneGraph user"""
  completedTours: [String!]!
}

"""A OneGraph User"""
type OneGraphUser {
  """The id of the OneGraph User"""
  id: String!

  """Whether this OneGraph user has confirmed their account"""
  confirmed: Boolean!

  """The primary email of the currently logged-in OneGraph user"""
  email: String!

  """The full name of the currently logged-in OneGraph user"""
  fullName: String!

  """
  The date at which this user agreed to the OneGraph terms of service at https://www.onegraph.com/terms-and-conditions
  """
  agreedToTosAt: Int

  """The settings of the currently logged-in OneGraph user"""
  settings: OneGraphUserSettings!

  """User hash for securely identifying a user with Intercom"""
  intercomUserHash: String!

  """Personal access tokens"""
  personalTokens: [OneGraphAccessToken!]

  """
  The gitHub databaseId if this OneGraph User has associated their account with a GitHub account
  """
  gitHubUserId: String
}

"""A scope that has been granted to the user"""
type OneGraphServiceMetadataGrantedScope {
  """The name of the scope that the underlying service uses."""
  scope: String!

  """
  Details about the scope. This may be null if OneGraph has not mapped out the scope.
  """
  scopeInfo: OneGraphServiceScope
}

type ApolloPerson implements OneGraphNode {
  """"""
  id: String

  """"""
  firstName: String

  """"""
  lastName: String

  """"""
  name: String

  """"""
  linkedinUrl: String

  """"""
  title: String

  """"""
  city: String

  """"""
  emailStatus: String

  """"""
  photoUrl: String

  """"""
  twitterUrl: String

  """"""
  githubUrl: String

  """"""
  facebookUrl: String

  """"""
  extrapolatedEmailConfidence: Float

  """"""
  headline: String

  """"""
  country: String

  """"""
  email: String

  """"""
  state: String

  """"""
  excludedForLeadgen: Boolean

  """"""
  organizationId: String

  """"""
  accountId: String

  """"""
  account: ApolloAccount

  """"""
  organization: ApolloOrganization

  """"""
  starredByUserIds: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloContactCampaignStatus {
  """"""
  id: String

  """"""
  emailerCampaignId: String

  """"""
  sendEmailFromUserId: String

  """"""
  inactiveReason: String

  """"""
  status: String

  """"""
  addedAt: String

  """"""
  addedByUserId: String

  """"""
  finishedAt: String

  """"""
  pausedAt: String

  """"""
  autoUnpauseAt: String

  """"""
  sendEmailFromEmailAddress: String

  """"""
  sendEmailFromEmailAccountId: String

  """"""
  manuallySetUnpause: String

  """"""
  failureReason: String

  """"""
  currentStepId: String
}

type ApolloPhoneNumber {
  """"""
  rawNumber: String

  """"""
  sanitizedNumber: String

  """"""
  type: String

  """"""
  position: Int

  """"""
  status: String
}

type ApolloContactJobChangeEvent {
  """"""
  id: String

  """"""
  createdAt: String

  """"""
  oldOrganizationId: String

  """"""
  newOrganizationId: String

  """"""
  personId: String

  """"""
  contactId: String

  """"""
  title: String

  """"""
  oldTitle: String

  """"""
  isProcessed: Boolean

  """"""
  isDismissed: Boolean

  """"""
  newOrganizationName: String

  """"""
  oldOrganizationName: String

  """"""
  contactName: String

  """"""
  accountId: String

  """"""
  accountName: String

  """"""
  oldAccountId: String

  """"""
  oldAccountName: String

  """"""
  charged: Boolean
}

type ApolloContact implements OneGraphNode {
  """"""
  id: String

  """"""
  firstName: String

  """"""
  lastName: String

  """"""
  name: String

  """"""
  linkedinUrl: String

  """"""
  title: String

  """"""
  contactStageId: String

  """"""
  ownerId: String

  """"""
  personId: String

  """"""
  emailNeedsTickling: Boolean

  """"""
  organizationName: String

  """"""
  source: String

  """"""
  originalSource: String

  """"""
  organizationId: String

  """"""
  headline: String

  """"""
  photoUrl: String

  """"""
  presentRawAddress: String

  """"""
  linkedinUid: String

  """"""
  extrapolatedEmailConfidence: Float

  """"""
  salesforceId: String

  """"""
  salesforceLeadId: String

  """"""
  salesforceContactId: String

  """"""
  salesforceAccountId: String

  """"""
  salesforceOwnerId: String

  """"""
  createdAt: String

  """"""
  leadRequestId: String

  """"""
  testPredictiveScore: String

  """"""
  emailManuallyChanged: Boolean

  """"""
  directDialStatus: String

  """"""
  directDialEnrichmentFailedAt: String

  """"""
  emailStatus: String

  """"""
  accountId: String

  """"""
  lastActivityDate: String

  """"""
  hubspotVid: String

  """"""
  hubspotCompanyId: String

  """"""
  sanitizedPhone: String

  """"""
  updatedAt: String

  """"""
  queuedForCrmPush: Boolean

  """"""
  suggestedFromRuleEngineConfigId: String

  """"""
  hasPendingEmailArcgateRequest: Boolean

  """"""
  hasEmailArcgateRequest: Boolean

  """"""
  existenceLevel: String

  """"""
  email: String

  """"""
  salesforceRecordUrl: String

  """"""
  state: String

  """"""
  city: String

  """"""
  country: String

  """"""
  accountPhoneNote: String

  """"""
  contactJobChangeEvent: ApolloContactJobChangeEvent

  """"""
  phoneNumbers: [ApolloPhoneNumber!]

  """"""
  organization: ApolloOrganization

  """"""
  account: ApolloAccount

  """"""
  contactCampaignStatuses: [ApolloContactCampaignStatus!]

  """"""
  labelIds: [String]

  """"""
  starredByUserIds: [String]

  """"""
  mergedCrmIds: [String]

  """"""
  emailerCampaignIds: [String]

  """
  All lists/tags that the user belongs to. This will match the values in label_ids
  """
  labels: [ApolloLabel!]

  """The contact stage that this contact belongs to."""
  contactStage: ApolloContactStage
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloAccount implements OneGraphNode {
  """"""
  id: String

  """"""
  name: String

  """"""
  websiteUrl: String

  """"""
  blogUrl: String

  """"""
  angelListUrl: String

  """"""
  linkedinUrl: String

  """"""
  twitterUrl: String

  """"""
  facebookUrl: String

  """"""
  alexaRanking: Int

  """"""
  phone: String

  """"""
  linkedinUid: String

  """"""
  publiclyTradedSymbol: String

  """"""
  publiclyTradedExchange: String

  """"""
  logoUrl: String

  """"""
  crunchbaseUrl: String

  """"""
  primaryDomain: String

  """"""
  domain: String

  """"""
  teamId: String

  """"""
  organizationId: String

  """"""
  accountStageId: String

  """"""
  source: String

  """"""
  originalSource: String

  """"""
  ownerId: String

  """"""
  createdAt: String

  """"""
  phoneStatus: String

  """"""
  testPredictiveScore: String

  """"""
  hubspotId: String

  """"""
  salesforceId: String

  """"""
  salesforceOwnerId: String

  """"""
  parentAccountId: String

  """"""
  existenceLevel: String

  """"""
  modality: String

  """"""
  salesforceRecordUrl: String

  """"""
  labelIds: [String]

  """"""
  accountPlaybookStatuses: [String]

  """"""
  starredByUserIds: [String]

  """"""
  languages: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloSequence implements OneGraphNode {
  """"""
  id: String

  """"""
  name: String

  """"""
  archived: Boolean

  """"""
  createdAt: String

  """"""
  emailerScheduleId: String

  """"""
  maxEmailsPerDay: String

  """"""
  userId: String

  """"""
  sameAccountReplyPolicyCd: String

  """"""
  createTaskIfEmailOpen: Boolean

  """"""
  emailOpenTriggerTaskThreshold: Int

  """"""
  markFinishedIfClick: Boolean

  """"""
  active: Boolean

  """"""
  daysToWaitBeforeMarkAsResponse: Int

  """"""
  markFinishedIfReply: Boolean

  """"""
  markFinishedIfInterested: Boolean

  """"""
  markPausedIfOoo: Boolean

  """"""
  sequenceByExactDaytime: String

  """"""
  permissions: String

  """"""
  lastUsedAt: String

  """"""
  sequenceRulesetId: String

  """"""
  folderId: String

  """"""
  sameAccountReplyDelayDays: Int

  """"""
  numSteps: Int

  """"""
  uniqueScheduled: Int

  """"""
  uniqueDelivered: Int

  """"""
  uniqueBounced: Int

  """"""
  uniqueOpened: Int

  """"""
  uniqueReplied: Int

  """"""
  uniqueDemoed: Int

  """"""
  uniqueClicked: Int

  """"""
  uniqueUnsubscribed: Int

  """"""
  bounceRate: Float

  """"""
  openRate: Float

  """"""
  clickRate: Float

  """"""
  replyRate: Float

  """"""
  spamBlockedRate: Float

  """"""
  optOutRate: Float

  """"""
  demoRate: Float

  """"""
  loadedStats: Boolean

  """"""
  ccEmails: String

  """"""
  bccEmails: String

  """"""
  starredByUserIds: [String]

  """"""
  labelIds: [String]

  """"""
  excludedContactStageIds: [String]

  """"""
  excludedAccountStageIds: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloContactStage implements OneGraphNode {
  """"""
  id: String

  """"""
  teamId: String

  """"""
  displayName: String

  """"""
  name: String

  """"""
  displayOrder: Float

  """"""
  ignoreTriggerOverride: Boolean

  """"""
  category: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloAccountStage implements OneGraphNode {
  """"""
  id: String

  """"""
  teamId: String

  """"""
  displayName: String

  """"""
  name: String

  """"""
  displayOrder: Float

  """"""
  defaultExcludeForLeadgen: Boolean

  """"""
  category: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloAssistantSetting {
  """"""
  dealSizeMetric: String

  """"""
  latestFundingDays: Int

  """"""
  latestNewsDays: Int

  """"""
  maxNumActiveAccounts: Int

  """"""
  maxPeopleInSequencePerAccount: Int

  """"""
  numInactiveDaysToReEngage: Int

  """"""
  territoryLocationOverride: Boolean

  """"""
  id: String

  """"""
  key: String

  """"""
  territoryPersonLocations: [String]

  """"""
  territoryLocations: [String]

  """"""
  territoryCompanySizeRanges: [String]

  """"""
  technologyUids: [String]

  """"""
  successCaseAccountStageIds: [String]

  """"""
  personaIds: [String]

  """"""
  jobPostingTitles: [String]

  """"""
  jobPostingLocations: [String]

  """"""
  inactiveContactStageIds: [String]

  """"""
  inactiveAccountStageIds: [String]
}

type ApolloOnboardingUseCase {
  """"""
  bulkStatus: String

  """"""
  currentUseCase: String

  """"""
  firstUserCase: String

  """"""
  searchedPeople: Boolean

  """"""
  downloadLeads: Boolean
}

type ApolloUser implements OneGraphNode {
  """"""
  id: String

  """"""
  teamId: String

  """"""
  firstName: String

  """"""
  lastName: String

  """"""
  title: String

  """"""
  email: String

  """"""
  createdAt: String

  """"""
  creditLimit: Int

  """"""
  directDialCreditLimit: Int

  """"""
  salesforceAccount: String

  """"""
  deleted: Boolean

  """"""
  shouldIncludeUnsubscribeLink: Boolean

  """"""
  optOutHtmlTemplate: String

  """"""
  name: String

  """"""
  enableClickTracking: Boolean

  """"""
  passwordNeedsReset: Boolean

  """"""
  salesforceId: String

  """"""
  defaultCockpitLayout: String

  """"""
  defaultAccountOverviewLayoutId: String

  """"""
  defaultOrganizationOverviewLayoutId: String

  """"""
  defaultContactOverviewLayoutId: String

  """"""
  bridgeCalls: Boolean

  """"""
  bridgePhoneNumber: String

  """"""
  bridgeIncomingCalls: Boolean

  """"""
  bridgeIncomingPhoneNumber: String

  """"""
  currentEmailVerified: Boolean

  """"""
  recordCalls: Boolean

  """"""
  salesforceInstanceUrl: String

  """"""
  permissionSetId: String

  """"""
  defaultUseLocalNumbers: Boolean

  """"""
  disableEmailLinking: String

  """"""
  syncSalesforceId: String

  """"""
  syncCrmId: String

  """"""
  zpContactId: String

  """"""
  chromeExtensionDownloaded: Boolean

  """"""
  emailOauthSigninOnly: Boolean

  """"""
  notificationLastCreatedAt: String

  """"""
  crmRequestedToIntegrate: String

  """"""
  hasInvitedUser: Boolean

  """"""
  notificationLastReadAt: String

  """"""
  dailyDataRequestEmail: Boolean

  """"""
  dataRequestEmails: Boolean

  """"""
  dailyTaskEmail: Boolean

  """"""
  freeDataCreditsEmail: Boolean

  """"""
  dismissNewTeamSuggestion: Boolean

  """"""
  requestEmailChangeTo: String

  """"""
  selfIdentifiedPersona: String

  """"""
  addedContactToSequence: Boolean

  """"""
  hasApprovedEmailerCampaign: Boolean

  """"""
  mainEmailerCampaignId: String

  """"""
  currentOnboardingStep: String

  """"""
  skipUseCaseSelection: Boolean

  """"""
  linkedSalesforce: String

  """"""
  linkedHubspot: Boolean

  """"""
  linkedSalesloft: Boolean

  """"""
  defaultChromeExtensionLogEmailSendToSalesforce: Boolean

  """"""
  chromeExtensionAutoMatchSalesforceOpportunity: Boolean

  """"""
  chromeExtensionGmailEnableEmailTools: Boolean

  """"""
  enableDesktopNotifications: Boolean

  """"""
  defaultChromeExtensionEnableReminders: Boolean

  """"""
  chromeExtensionGmailEnableCrmSidebar: Boolean

  """"""
  prospectTerritoryIds: [String]

  """"""
  subteamIds: [String]

  """"""
  onboardingUseCases: ApolloOnboardingUseCase

  """"""
  userRoles: [String]

  """"""
  assistantSetting: ApolloAssistantSetting
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloEmailAccount implements OneGraphNode {
  """"""
  id: String

  """"""
  userId: String

  """"""
  email: String

  """"""
  type: String

  """"""
  active: Boolean

  """"""
  default: Boolean

  """"""
  secondsDelayBetweenEmails: Int

  """"""
  providerDisplayName: String

  """"""
  nylasProvider: String

  """"""
  lastSyncedAt: String

  """"""
  emailSendingPolicyCd: String

  """"""
  sendgridApiUser: String

  """"""
  mailgunDomains: String

  """"""
  signatureEditDisabled: Boolean

  """"""
  emailDailyThreshold: Int

  """"""
  maxOutboundEmailsPerHour: Int

  """"""
  signatureHtml: String

  """"""
  aliases: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloLabel implements OneGraphNode {
  """"""
  cachedCount: Int

  """"""
  createdAt: String

  """"""
  modality: String

  """"""
  name: String

  """"""
  teamId: String

  """"""
  updatedAt: String

  """"""
  userId: String

  """"""
  id: String

  """"""
  key: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloPicklistValue {
  """"""
  name: String

  """"""
  id: String

  """"""
  key: String
}

type ApolloTypedCustomField implements OneGraphNode {
  """"""
  id: String

  """"""
  modality: String

  """"""
  name: String

  """"""
  type: String

  """"""
  mappedCrmField: String

  """"""
  additionalMappedCrmField: String

  """"""
  isReadonlyMappedCrmField: Boolean

  """"""
  picklistOptionsLastSyncedAt: String

  """"""
  picklistValueSetId: String

  """"""
  mirrored: Boolean

  """"""
  systemName: String

  """"""
  textFieldMaxLength: String

  """"""
  picklistValues: [ApolloPicklistValue!]

  """"""
  picklistOptions: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloOrganizationJobPosting {
  """"""
  id: String

  """"""
  title: String

  """"""
  url: String

  """"""
  city: String

  """"""
  state: String

  """"""
  country: String

  """"""
  lastSeenAt: String

  """"""
  postedAt: String
}

type ApolloSuborganization {
  """"""
  id: String

  """"""
  name: String

  """"""
  websiteUrl: String
}

type ApolloCurrentTechnology {
  """"""
  uid: String

  """"""
  name: String

  """"""
  category: String
}

type ApolloOrganization implements OneGraphNode {
  """"""
  id: String

  """"""
  name: String

  """"""
  websiteUrl: String

  """"""
  blogUrl: String

  """"""
  angelListUrl: String

  """"""
  linkedinUrl: String

  """"""
  twitterUrl: String

  """"""
  facebookUrl: String

  """"""
  alexaRanking: Int

  """"""
  phone: String

  """"""
  linkedinUid: String

  """"""
  publiclyTradedSymbol: String

  """"""
  publiclyTradedExchange: String

  """"""
  logoUrl: String

  """"""
  crunchbaseUrl: String

  """"""
  primaryDomain: String

  """"""
  marketCap: String

  """"""
  industry: String

  """"""
  estimatedNumEmployees: Int

  """"""
  snippetsLoaded: Boolean

  """"""
  industryTagId: String

  """"""
  retailLocationCount: Int

  """"""
  rawAddress: String

  """"""
  streetAddress: String

  """"""
  city: String

  """"""
  state: String

  """"""
  postalCode: String

  """"""
  country: String

  """"""
  ownedByOrganizationId: String

  """"""
  numSuborganizations: Int

  """"""
  seoDescription: String

  """"""
  shortDescription: String

  """"""
  annualRevenuePrinted: String

  """"""
  annualRevenue: Float

  """"""
  currentTechnologies: [ApolloCurrentTechnology!]

  """"""
  technologyNames: [String]

  """"""
  suborganizations: [ApolloSuborganization!]

  """"""
  keywords: [String]

  """"""
  starredByUserIds: [String]

  """"""
  languages: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!

  """Lists of active job postings for a company."""
  jobPostings: [ApolloOrganizationJobPosting!]
}

"""An edge in a connection."""
type DevToCommentsEdge {
  """The item at the end of the edge"""
  node: DevToComment!
}

"""Comments on DevTo"""
type DevToCommentsConnection {
  """Comments"""
  nodes: [DevToComment!]!

  """A list of edges"""
  edges: [DevToCommentsEdge!]!
}

type DevToArticle implements OneGraphNode {
  """"""
  id: Int

  """"""
  title: String

  """"""
  description: String

  """"""
  coverImage: String

  """"""
  readablePublishDate: String

  """"""
  socialImage: String

  """"""
  slug: String

  """"""
  path: String

  """"""
  url: String

  """"""
  canonicalUrl: String

  """"""
  commentsCount: Int

  """"""
  positiveReactionsCount: Int

  """"""
  createdAt: String

  """"""
  editedAt: String

  """"""
  crosspostedAt: String

  """"""
  publishedAt: String

  """"""
  lastCommentAt: String

  """Crossposting or published date time"""
  publishedTimestamp: String

  """"""
  user: DevToArticleUser

  """"""
  organization: DevToArticleOrganization

  """"""
  flareTag: DevToArticleFlareTag

  """The body content as the original markdown"""
  bodyMarkdown: String

  """The body content as the rendered html"""
  bodyHtml: String

  """Keywords this article has been tagged with"""
  tags: [String!]

  """Comments for this article"""
  comments: DevToCommentsConnection
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToComment implements OneGraphNode {
  """"""
  idCode: String

  """HTML formatted comment"""
  bodyHtml: String

  """"""
  user: DevToArticleUser

  """"""
  children: [DevToComment!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToArticleFlareTag {
  """"""
  name: String

  """Background color (hexadecimal)"""
  bgColorHex: String

  """Text color (hexadecimal)"""
  textColorHex: String
}

"""Articles created by the currently authenticated user"""
type DevToMeArticle implements OneGraphNode {
  """"""
  id: Int

  """"""
  title: String

  """"""
  description: String

  """"""
  coverImage: String

  """"""
  published: Boolean

  """"""
  publishedAt: String

  """"""
  slug: String

  """"""
  path: String

  """"""
  url: String

  """"""
  canonicalUrl: String

  """"""
  commentsCount: Int

  """"""
  positiveReactionsCount: Int

  """"""
  pageViewsCount: Int

  """Crossposting or published date time"""
  publishedTimestamp: String

  """"""
  user: DevToArticleUser

  """"""
  organization: DevToArticleOrganization

  """"""
  flareTag: DevToArticleFlareTag

  """The body content as the original markdown"""
  bodyMarkdown: String

  """The body content as the rendered html"""
  bodyHtml: String

  """Keywords this article has been tagged with"""
  tags: [String!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToArticleOrganization {
  """"""
  name: String

  """"""
  username: String

  """"""
  slug: String

  """Profile image (640x640)"""
  profileImage: String

  """Profile image (90x90)"""
  profileImage90: String
}

enum DevToListingCategoryEnum {
  CFP
  FORHIRE
  COLLABS
  EDUCATION
  JOBS
  MENTORS
  PRODUCTS
  MENTEES
  FORSALE
  EVENTS
  MISC
}

type DevToListing implements OneGraphNode {
  """"""
  id: Int

  """"""
  title: String

  """"""
  slug: String

  """"""
  bodyMarkdown: String

  """"""
  category: DevToListingCategoryEnum

  """"""
  processedHtml: String

  """"""
  published: Boolean

  """"""
  user: DevToArticleUser

  """"""
  organization: DevToArticleOrganization
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToUser implements OneGraphNode {
  """"""
  id: Int

  """"""
  username: String

  """"""
  name: String

  """"""
  summary: String

  """"""
  twitterUsername: String

  """"""
  githubUsername: String

  """"""
  websiteUrl: String

  """"""
  location: String

  """Date of joining (formatted with strftime `"%b %e, %Y"`)"""
  joinedAt: String

  """Profile image (320x320)"""
  profileImage: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToArticleUser {
  """"""
  name: String

  """"""
  username: String

  """"""
  twitterUsername: String

  """"""
  githubUsername: String

  """"""
  websiteUrl: String

  """Profile image (640x640)"""
  profileImage: String

  """Profile image (90x90)"""
  profileImage90: String
}

type DevToWebhook implements OneGraphNode {
  """"""
  id: Int

  """
  The name of the requester, eg. "DEV"
  """
  source: String

  """"""
  targetUrl: String

  """An array of events identifiers"""
  events: [String]

  """"""
  createdAt: String

  """The user who created this webhook"""
  user: DevToArticleUser
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum MuxVideoSimulcastTargetStatusEnum {
  IDLE
  STARTING
  BROADCASTING
  ERRORED
}

type MuxVideoSimulcastTarget {
  """ID of the Simulcast Target"""
  id: String

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String

  """
  The current status of the simulcast target. See Statuses below for detailed description.
    * `idle`: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.
    * `starting`: The simulcast target transitions into this state when the parent live stream transition into connected state.
    * `broadcasting`: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.
    * `errored`: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. Compared to other errored statuses in the Mux Video API, a simulcast may transition back into the broadcasting state if a connection with the service can be re-established.
  
  """
  status: MuxVideoSimulcastTargetStatusEnum

  """
  Stream Key represents an stream identifier for the third party live streaming service to simulcast the parent live stream too.
  """
  streamKey: String

  """
  RTMP hostname including the application name for the third party live streaming service.
  """
  url: String
}

type MuxVideoLiveStream implements OneGraphNode {
  """"""
  id: String

  """"""
  createdAt: String

  """"""
  streamKey: String

  """"""
  activeAssetId: String

  """"""
  recentAssetIds: [String]

  """"""
  status: String

  """"""
  playbackIds: [MuxVideoPlaybackID!]

  """The settings to be used for Assets created during a broadcast"""
  newAssetSettings: MuxVideoAsset

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String

  """"""
  reconnectWindow: Float

  """"""
  reducedLatency: Boolean

  """"""
  simulcastTargets: [MuxVideoSimulcastTarget!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoSigningKey implements OneGraphNode {
  """"""
  id: String

  """"""
  createdAt: String

  """"""
  privateKey: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoUploadError {
  """"""
  type: String

  """"""
  message: String
}

type MuxVideoInputTrack {
  """"""
  type: String

  """"""
  duration: Float

  """"""
  encoding: String

  """"""
  width: Int

  """"""
  height: Int

  """"""
  frameRate: Float

  """"""
  sampleRate: Int

  """"""
  sampleSize: Int

  """"""
  channels: Int
}

type MuxVideoInputFile {
  """"""
  containerFormat: String

  """"""
  tracks: [MuxVideoInputTrack!]
}

enum MuxVideoInputSettingsTextTypeEnum {
  SUBTITLES
}

enum MuxVideoInputSettingsTypeEnum {
  VIDEO
  AUDIO
  TEXT
}

enum MuxVideoInputSettingsOverlaySettingsHorizontalAlignEnum {
  LEFT
  CENTER
  RIGHT
}

enum MuxVideoInputSettingsOverlaySettingsVerticalAlignEnum {
  TOP
  MIDDLE
  BOTTOM
}

type MuxVideoInputSettingsOverlaySettings {
  """"""
  verticalAlign: MuxVideoInputSettingsOverlaySettingsVerticalAlignEnum

  """"""
  verticalMargin: String

  """"""
  horizontalAlign: MuxVideoInputSettingsOverlaySettingsHorizontalAlignEnum

  """"""
  horizontalMargin: String

  """"""
  width: String

  """"""
  height: String

  """"""
  opacity: String
}

type MuxVideoInputSettings {
  """"""
  url: String

  """"""
  overlaySettings: MuxVideoInputSettingsOverlaySettings

  """"""
  type: MuxVideoInputSettingsTypeEnum

  """"""
  textType: MuxVideoInputSettingsTextTypeEnum

  """"""
  languageCode: String

  """"""
  name: String

  """"""
  closedCaptions: Boolean

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String
}

type MuxVideoInputInfo implements OneGraphNode {
  """"""
  settings: MuxVideoInputSettings

  """"""
  file: MuxVideoInputFile
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum MuxVideoAssetStaticRenditionsFilesExtEnum {
  MP4
}

enum MuxVideoAssetStaticRenditionsFilesNameEnum {
  LOW_MP4
  MEDIUM_MP4
  HIGH_MP4
}

type MuxVideoAssetStaticRenditionsFiles {
  """"""
  name: MuxVideoAssetStaticRenditionsFilesNameEnum

  """Extension of the static rendition file"""
  ext: MuxVideoAssetStaticRenditionsFilesExtEnum

  """The height of the static rendition's file in pixels"""
  height: Int

  """The width of the static rendition's file in pixels"""
  width: Int

  """The bitrate in bits per second"""
  bitrate: Int

  """"""
  filesize: String
}

enum MuxVideoAssetStaticRenditionsStatusEnum {
  READY
  PREPARING
  DISABLED
  ERRORED
}

type MuxVideoAssetStaticRenditions {
  """
  * `ready`: All MP4s are downloadable
  * `preparing`: We are preparing the MP4s
  * `disabled`: MP4 support was not requested or has been removed
  * `errored`: There was a Mux internal error that prevented the MP4s from being created
  
  """
  status: MuxVideoAssetStaticRenditionsStatusEnum

  """"""
  files: [MuxVideoAssetStaticRenditionsFiles!]
}

enum MuxVideoAssetMp4SupportEnum {
  STANDARD
  NONE
}

enum MuxVideoAssetMasterAccessEnum {
  TEMPORARY
  NONE
}

type MuxVideoAssetMaster {
  """"""
  status: String

  """"""
  url: String
}

type MuxVideoAssetErrors {
  """"""
  type: String

  """"""
  messages: [String]
}

enum MuxVideoTrackTextTypeEnum {
  SUBTITLES
}

enum MuxVideoTrackTypeEnum {
  VIDEO
  AUDIO
  TEXT
}

type MuxVideoTrack {
  """"""
  id: String

  """"""
  type: MuxVideoTrackTypeEnum

  """"""
  duration: Float

  """"""
  maxWidth: Int

  """"""
  maxHeight: Int

  """"""
  maxFrameRate: Float

  """"""
  maxChannels: Int

  """"""
  maxChannelLayout: String

  """"""
  textType: MuxVideoTrackTextTypeEnum

  """"""
  languageCode: String

  """"""
  name: String

  """"""
  closedCaptions: Boolean

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String
}

enum MuxVideoPlaybackUrlExtensionEnumArg {
  M_3U_8
}

enum MuxVideoThumbnailImageFitModeEnumArg {
  PRESERVE
  STRETCH
  CROP
  SMARTCROP
  PAD
}

enum MuxVideoThumbnailImageExtensionEnumArg {
  JPG
  PNG
}

enum MuxVideoPlaybackPolicyEnum {
  PUBLIC
  SIGNED
}

type MuxVideoPlaybackID {
  """"""
  id: String

  """"""
  policy: MuxVideoPlaybackPolicyEnum

  """
  The Image URL API allows you to pull images from a Mux Video asset in real time. Any frame of an asset is available as a PNG or JPG image, to use as a thumbnail or poster image.
  """
  thumbnail(
    """
    How to fit a thumbnail within width + height. Valid values are preserve, stretch, crop, smartcrop, and pad. See below for details.
    
                                         preserve: By default, Mux will preserve the aspect ratio of the video, while fitting the image within the requested width and height. For example if the thumbnail width is 100, the height is 100, and the video's aspect ratio is 16:9, the delivered image will be 100x56 (16:9).
    
                                         stretch: The thumbnail will exactly fill the requested width and height, even if it distorts the image. Requires both width and height to be set.
                                         (Not very popular.)
    
                                         crop: The video image will be scaled up or down until it fills the requested width and height box. Pixels then outside of the box will be cropped off. The crop is always centered on the image. Requires both width and height to be set.
    
                                         smartcrop: An algorithm will attempt to find an area of interest in the image and center it within the crop, while fitting the requested width and height. Requires both width and height to be set.
    
                                         pad: Similar to preserve but Mux will "letterbox" or "pillarbox" (add black padding to) the image to make it fit the requested width and height exactly. This is less efficient than preserve but allows for maintaining the aspect ratio while always getting thumbnails of the same size. Requires both width and height to be set.
    """
    fitMode: MuxVideoThumbnailImageFitModeEnumArg

    """Flip the image left-right after performing all other transformations."""
    flipH: Boolean

    """Flip the image top-bottom after performing all other transformations."""
    flipV: Boolean

    """
    Rotate the image clockwise by the given number of degrees. Valid values are 90, 180, and 270.
    """
    rotate: Int

    """
    The height in pixels of the thumbnail (in pixels). Defaults to the height of the original video.
    """
    height: Int

    """
    The width in pixels of the thumbnail (in pixels). Defaults to the width of the original video.
    """
    width: Int

    """
    The time (in seconds) of the video timeline where the image should be pulled. Defaults to a frame selected from the middle of the video (this default may change at any time).
    """
    time: Float
    extension: MuxVideoThumbnailImageExtensionEnumArg!
  ): String

  """
  The Image URL API allows you to generate short animated GIFs from a video.
  """
  animatedGif(
    """The frame rate of the generated gif. Defaults to 15 fps. Max 30 fps."""
    fps: Int

    """
    The height in pixels of the animated gif. The default height is determined by preserving aspect ratio with the width provided. Maximum height is 640px.
    """
    height: Int

    """
    The width in pixels of the animated gif. Default is 320px, or if height is provided, the width is determined by preserving aspect ratio with the height. Max width is 640px.
    """
    width: Int

    """
    The time (in seconds) of the video timeline where the gif ends. Defaults to 5 seconds after the `start`. Maximum total duration of gif is limited to 10 seconds; minimum total duration of gif is 250ms.
    """
    end: Float = 5

    """
    The time (in seconds) of the video timeline where the animated gif should begin. Defaults to 0.
    """
    start: Float = 0
  ): String

  """
  To play a video, create a playback URL including a [Playback ID](https://docs.mux.com/reference-link/playback-ids) for the [asset](https://docs.mux.com/reference-link/assets) you want to play.
  """
  playbackUrl(
    """
    A streaming format. Currently, Mux Video only supports HTTP Live Streaming video (m3u8), but support for other formats (like MPEG-DASH) are in development.
    """
    ext: MuxVideoPlaybackUrlExtensionEnumArg = M_3U_8
  ): String
}

type MuxVideoAsset implements OneGraphNode {
  """"""
  id: String

  """"""
  createdAt: String

  """"""
  deletedAt: String

  """"""
  status: String

  """"""
  duration: Float

  """"""
  maxStoredResolution: String

  """"""
  maxStoredFrameRate: Float

  """"""
  aspectRatio: String

  """"""
  playbackIds: [MuxVideoPlaybackID!]

  """"""
  tracks: [MuxVideoTrack!]

  """"""
  demo: Boolean

  """"""
  errors: MuxVideoAssetErrors

  """"""
  perTitleEncode: Boolean

  """"""
  isLive: Boolean

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String

  """"""
  liveStreamId: String

  """"""
  master: MuxVideoAssetMaster

  """"""
  masterAccess: MuxVideoAssetMasterAccessEnum

  """"""
  mp4Support: MuxVideoAssetMp4SupportEnum

  """"""
  normalizeAudio: Boolean

  """"""
  staticRenditions: MuxVideoAssetStaticRenditions

  """
  Marks the asset as a test asset when the value is set to true.
  
  A Test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test asset are:
  - watermarked with the Mux logo
  - limited to 10 seconds
  - deleted after 24 hrs
  
  For more information, see this [blog post](https://mux.com/blog/new-test-mux-video-features-for-free/).
  """
  isTest: Boolean

  """
  A list of the input objects that were used to create the asset along with any settings that were applied to each input.
  """
  inputInfo: [MuxVideoInputInfo!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum MuxVideoUploadStatusEnum {
  WAITING
  ASSET_CREATED
  ERRORED
  CANCELLED
  TIMED_OUT
}

type MuxVideoUpload implements OneGraphNode {
  """"""
  id: String

  """
  Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`
  """
  timeout: Int

  """"""
  status: MuxVideoUploadStatusEnum

  """The settings to be used for Assets created during a broadcast"""
  newAssetSettings: MuxVideoAsset

  """Only set once the upload is in the `asset_created` state."""
  assetId: String

  """Only set if an error occurred during asset creation."""
  error: MuxVideoUploadError

  """
  If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.
  """
  corsOrigin: String

  """The URL to upload the associated source media to."""
  url: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoVideoViewEvent {
  """"""
  viewerTime: Int

  """"""
  playbackTime: Int

  """"""
  name: String

  """"""
  eventTime: Int
}

type MuxVideoVideoView implements OneGraphNode {
  """"""
  viewTotalUpscaling: String

  """"""
  prerollAdAssetHostname: String

  """"""
  playerSourceDomain: String

  """"""
  region: String

  """"""
  viewerUserAgent: String

  """"""
  prerollRequested: Boolean

  """"""
  pageType: String

  """"""
  startupScore: String

  """"""
  viewSeekDuration: String

  """"""
  countryName: String

  """"""
  playerSourceHeight: Int

  """"""
  longitude: String

  """"""
  bufferingCount: String

  """"""
  videoDuration: String

  """"""
  playerSourceType: String

  """"""
  city: String

  """"""
  viewId: String

  """"""
  platformDescription: String

  """"""
  videoStartupPrerollRequestTime: String

  """"""
  viewerDeviceName: String

  """"""
  videoSeries: String

  """"""
  viewerApplicationName: String

  """"""
  updatedAt: String

  """"""
  viewTotalContentPlaybackTime: String

  """"""
  cdn: String

  """"""
  playerInstanceId: String

  """"""
  videoLanguage: String

  """"""
  playerSourceWidth: Int

  """"""
  playerErrorMessage: String

  """"""
  playerMuxPluginVersion: String

  """"""
  watched: Boolean

  """"""
  playbackScore: String

  """"""
  pageUrl: String

  """"""
  metro: String

  """"""
  viewMaxRequestLatency: String

  """"""
  requestsForFirstPreroll: String

  """"""
  viewTotalDownscaling: String

  """"""
  latitude: String

  """"""
  playerSourceHostName: String

  """"""
  insertedAt: String

  """"""
  viewEnd: String

  """"""
  muxEmbedVersion: String

  """"""
  playerLanguage: String

  """"""
  pageLoadTime: Int

  """"""
  viewerDeviceCategory: String

  """"""
  videoStartupPrerollLoadTime: String

  """"""
  playerVersion: String

  """"""
  watchTime: Int

  """"""
  playerSourceStreamType: String

  """"""
  prerollAdTagHostname: String

  """"""
  viewerDeviceManufacturer: String

  """"""
  rebufferingScore: String

  """"""
  experimentName: String

  """"""
  viewerOsVersion: String

  """"""
  playerPreload: Boolean

  """"""
  bufferingDuration: String

  """"""
  playerViewCount: Int

  """"""
  playerSoftware: String

  """"""
  playerLoadTime: String

  """"""
  platformSummary: String

  """"""
  videoEncodingVariant: String

  """"""
  playerWidth: Int

  """"""
  viewSeekCount: String

  """"""
  viewerExperienceScore: String

  """"""
  viewErrorId: Int

  """"""
  videoVariantName: String

  """"""
  prerollPlayed: Boolean

  """"""
  viewerApplicationEngine: String

  """"""
  viewerOsArchitecture: String

  """"""
  playerErrorCode: String

  """"""
  bufferingRate: String

  """"""
  events: [MuxVideoVideoViewEvent!]

  """"""
  playerName: String

  """"""
  viewStart: String

  """"""
  viewAverageRequestThroughput: String

  """"""
  videoProducer: String

  """"""
  errorTypeId: Int

  """"""
  muxViewerId: String

  """"""
  videoId: String

  """"""
  continentCode: String

  """"""
  sessionId: String

  """"""
  exitBeforeVideoStart: Boolean

  """"""
  videoContentType: String

  """"""
  viewerOsFamily: String

  """"""
  playerPoster: String

  """"""
  viewAverageRequestLatency: String

  """"""
  videoVariantId: String

  """"""
  playerSourceDuration: Int

  """"""
  playerSourceUrl: String

  """"""
  muxApiVersion: String

  """"""
  videoTitle: String

  """"""
  id: String

  """"""
  shortTime: String

  """"""
  rebufferPercentage: String

  """"""
  timeToFirstFrame: String

  """"""
  viewerUserId: String

  """"""
  videoStreamType: String

  """"""
  playerStartupTime: Int

  """"""
  viewerApplicationVersion: String

  """"""
  viewMaxDownscalePercentage: String

  """"""
  viewMaxUpscalePercentage: String

  """"""
  countryCode: String

  """"""
  usedFullscreen: Boolean

  """"""
  isp: String

  """"""
  propertyId: Int

  """"""
  playerAutoplay: Boolean

  """"""
  playerHeight: Int

  """"""
  asn: Int

  """"""
  qualityScore: String

  """"""
  playerSoftwareVersion: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type OrbitMembersEdge {
  """The item at the end of the edge"""
  node: OrbitMember!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Members on Orbit"""
type OrbitMembersConnection {
  """Members"""
  nodes: [OrbitMember!]!

  """A list of edges"""
  edges: [OrbitMembersEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrbitWorkspaceActivityEdge {
  """The item at the end of the edge"""
  node: OrbitActivity!

  """A cursor for use in pagination."""
  cursor: String!
}

"""WorkspaceActivity on Orbit"""
type OrbitWorkspaceActivityConnection {
  """WorkspaceActivity"""
  nodes: [OrbitActivity!]!

  """A list of edges"""
  edges: [OrbitWorkspaceActivityEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

type OrbitIssueActivity implements OrbitActivity {
  """"""
  id: String

  """"""
  key: String

  """"""
  action: String

  """"""
  occurredAt: String

  """"""
  updatedAt: String

  """"""
  orbitUrl: String

  """"""
  gitHubTitle: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitIssueCommentActivity implements OrbitActivity {
  """"""
  id: String

  """"""
  key: String

  """"""
  action: String

  """"""
  occurredAt: String

  """"""
  updatedAt: String

  """"""
  orbitUrl: String

  """"""
  gitHubTitle: String

  """"""
  gitHubHtmlUrl: String

  """"""
  gitHubNumber: Int

  """"""
  gitHubCreatedAt: String

  """"""
  gitHubId: Int

  """"""
  gitHubBody: String

  """"""
  isPullRequest: Boolean

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitStarActivity implements OrbitActivity {
  """"""
  id: String

  """"""
  key: String

  """"""
  action: String

  """"""
  occurredAt: String

  """"""
  updatedAt: String

  """"""
  orbitUrl: String

  """"""
  gitHubStarredAt: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitPullRequestActivity implements OrbitActivity {
  """"""
  id: String

  """"""
  key: String

  """"""
  action: String

  """"""
  occurredAt: String

  """"""
  updatedAt: String

  """"""
  orbitUrl: String

  """"""
  gitHubTitle: String

  """"""
  gitHubMergedAt: String

  """"""
  gitHubMerged: Boolean

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitNoteActivity implements OrbitActivity {
  """"""
  id: String

  """"""
  key: String

  """"""
  action: String

  """"""
  occurredAt: String

  """"""
  updatedAt: String

  """"""
  orbitUrl: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitPostActivity implements OrbitActivity {
  """"""
  id: String

  """"""
  key: String

  """"""
  action: String

  """"""
  occurredAt: String

  """"""
  updatedAt: String

  """"""
  orbitUrl: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

scalar JSON

type OrbitCustomActivity implements OrbitActivity {
  """"""
  id: String

  """"""
  key: String

  """"""
  action: String

  """"""
  occurredAt: String

  """"""
  updatedAt: String

  """"""
  orbitUrl: String
  raw: JSON!

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

"""
Activities are instances of community participation and contribution, such as GitHub issues, pull requests, Discourse posts, mentions on twitter, and more. Orbit integrations come with built in activities, but you can also add your own.
"""
interface OrbitActivity {
  """id for the service auth"""
  id: String

  """
  The type of action the user did for that activity, e.g. `created`, `merged`, `opened`.
  """
  action: String

  """
  A unique identitier for the activity that makes sure duplicates of it are not recorded. Optional but recommended if your integration may resend data multiple times. A strong key choice might be the id or timestamp of an event registration along with the event name, e.g. "july-conference-registration:123456". If Orbit receives a POST to create an activity with that key more than once for the same member, it will only create one.
  """
  key: String

  """The member (if any) associated with this activity"""
  member: OrbitMember

  """The date and time at which the activity occurred."""
  occurredAt: String

  """The date and time at which the activity was last updated in Orbit."""
  updatedAt: String
}

type OrbitWorkspace implements OneGraphNode {
  """"""
  id: String

  """"""
  name: String

  """"""
  slug: String

  """"""
  createdAt: String

  """"""
  updatedAt: String

  """Retrieve a specific activity for a workspace."""
  activity(id: String!): OrbitActivity

  """List activities for a workspace."""
  activities(
    repository: String
    type: String
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitWorkspaceActivityConnection

  """Retrieve posts for a workspace."""
  posts(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitPostsConnection

  """Retrieve a specific member for a workspace."""
  member(id: String!): OrbitMember

  """Retrieve members for a workspace."""
  members(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitMembersConnection
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type OrbitPostsEdge {
  """The item at the end of the edge"""
  node: OrbitPost!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Posts on Orbit"""
type OrbitPostsConnection {
  """Posts"""
  nodes: [OrbitPost!]!

  """A list of edges"""
  edges: [OrbitPostsEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type OrbitNotesEdge {
  """The item at the end of the edge"""
  node: OrbitNote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Notes on Orbit"""
type OrbitNotesConnection {
  """Notes"""
  nodes: [OrbitNote!]!

  """A list of edges"""
  edges: [OrbitNotesEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

type OrbitMember implements OneGraphNode {
  """"""
  id: String

  """"""
  bio: String

  """"""
  avatarUrl: String

  """"""
  birthday: String

  """"""
  company: String

  """"""
  location: String

  """"""
  name: String

  """"""
  pronouns: String

  """"""
  shippingAddress: String

  """"""
  slug: String

  """Adds tags to member; comma-separated string or array"""
  tagsToAdd: String

  """Replaces all tags for the member; comma-separated string or array"""
  tagList: [String]

  """"""
  tshirt: String

  """"""
  teammate: Boolean

  """"""
  url: String

  """The member's GitHub username"""
  github: String

  """The member's Twitter username"""
  twitter: String

  """The member's email"""
  email: String

  """The member's Discourse username"""
  discourse: String

  """The host of the Discourse"""
  discourseHostname: String

  """The member's dev.to username"""
  linkedin: String

  """The member's dev.to username"""
  devto: String

  """Retrieve notes for a member."""
  notes(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitNotesConnection

  """Retrieve posts by a member."""
  posts(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitPostsConnection
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type OrbitNote implements OneGraphNode {
  """"""
  id: String

  """"""
  body: String

  """"""
  createdAt: String

  """"""
  updatedAt: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Filter linked nodes by __typename."""
input OneGraphLinkedNodesTypenameFilter {
  """
  Checks for linked nodes where the __typename is in the list of the provided values.
  """
  in: [String!]

  """
  Checks for linked nodes where the __typename is equal to the provided value.
  """
  equalTo: String
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnumArg {
  ADROLL
  ASANA
  BOX
  CLOUDINARY
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SLACK
  SPOTIFY
  STRIPE
  TWITCH_TV
  TWILIO
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  TRELLO
  TWITTER
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Filter linked nodes by service."""
input OneGraphLinkedNodesServiceFilter {
  """
  Checks for linked nodes where the service is in the list of the provided values.
  """
  in: [OneGraphServiceEnumArg!]

  """
  Checks for linked nodes where the service is equal to the provided value.
  """
  equalTo: OneGraphServiceEnumArg
}

input OneGraphLinkedNodesConnectionFilter {
  """Filter connections by their GraphQL __typename"""
  typename: OneGraphLinkedNodesTypenameFilter

  """Filter connections by service"""
  service: OneGraphLinkedNodesServiceFilter
}

type OrbitPost implements OneGraphNode {
  """"""
  createdAt: String

  """"""
  description: String

  """"""
  image: String

  """"""
  publishedAt: String

  """"""
  title: String

  """"""
  updatedAt: String

  """"""
  url: String

  """"""
  id: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object with a globally unique id across all of OneGraph"""
interface OneGraphNode {
  """The id of the object."""
  oneGraphId: ID!

  """List of OneGraphNodes that are linked from this node."""
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!
}

"""List of OneGraphNodes that are linked from this node."""
type OneGraphLinkedNodesConnection {
  """List of OneGraphNodes that are linked from this node."""
  nodes: [OneGraphNode!]!
}

"""The style for the logo svg."""
enum OneGraphAppLogoStyleEnum {
  DEFAULT
  ROUNDED_RECTANGLE
}

"""An OAuth scope that the service supports."""
type OneGraphServiceScope {
  category: String
  scope: String!
  display: String!
  isDefault: Boolean!
  isRequired: Boolean!
  description: String!
  title: String
}

"""Information about a service that OneGraph supports."""
type OneGraphServiceInfo implements OneGraphNode {
  service: OneGraphServiceEnum!
  friendlyServiceName: String!

  """
  Service string that can be provided in the URL when going through the oauth flow.
  """
  slug: String!
  supportsOauthLogin: Boolean!
  supportsCustomServiceAuth: Boolean!
  supportsCustomRedirectUri: Boolean!
  supportsTestFlow: Boolean!
  availableScopes: [OneGraphServiceScope!]

  """A short-lived svg image url of the logo for the service. May be null."""
  logoUrl(style: OneGraphAppLogoStyleEnum = DEFAULT): String

  """Whether Netlify API Authentication is enabled for this service"""
  netlifyApiAuthenticationEnabled: Boolean!

  """Whether Netlify Graph is enabled for this service"""
  netlifyGraphEnabled: Boolean!

  """
  The prefix that all GraphQL types addded by this service will have, e.g. `GitHub`.
  """
  typePrefix: String!

  """
  The name of the root field for this service in the GraphQL schema, e.g. `gitHub`.
  """
  fieldName: String!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnum {
  ADROLL
  ASANA
  BOX
  CLOUDINARY
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SLACK
  SPOTIFY
  STRIPE
  TWITCH_TV
  TWILIO
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  TRELLO
  TWITTER
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Information about a service."""
type OneGraphServiceMetadata {
  service: OneGraphServiceEnum!
  friendlyServiceName: String!
  isLoggedIn: Boolean!
  usedTestFlow: Boolean!
  foreignUserId: String

  """
  Bearer token that can be used to query the underlying API directly. This field will always be null unless the OneGraph App has enabled sharing tokens for its custom OAuth client.
  """
  bearerToken: String
  serviceInfo: OneGraphServiceInfo!

  """
  The scopes that the user granted for this service. This is a best estimate of the scopes that were granted. Most services do not have a way to query the scopes on an auth, and some services do not return information about the scopes that were granted in the auth flow.
  """
  grantedScopes: [OneGraphServiceMetadataGrantedScope!]
}

"""Information about OneGraph services"""
type OneGraphServicesMetadata {
  loggedInServices: [OneGraphServiceMetadata!]!
  adroll: OneGraphServiceMetadata!
  asana: OneGraphServiceMetadata!
  box: OneGraphServiceMetadata!
  cloudinary: OneGraphServiceMetadata!
  contentful: OneGraphServiceMetadata!
  devTo: OneGraphServiceMetadata!
  docusign: OneGraphServiceMetadata!
  dribbble: OneGraphServiceMetadata!
  dropbox: OneGraphServiceMetadata!
  eggheadio: OneGraphServiceMetadata!
  eventil: OneGraphServiceMetadata!
  facebookBusiness: OneGraphServiceMetadata!
  firebase: OneGraphServiceMetadata!
  gitHub: OneGraphServiceMetadata!
  gmail: OneGraphServiceMetadata!
  gong: OneGraphServiceMetadata!
  google: OneGraphServiceMetadata!
  googleAds: OneGraphServiceMetadata!
  googleAnalytics: OneGraphServiceMetadata!
  googleCalendar: OneGraphServiceMetadata!
  googleCompute: OneGraphServiceMetadata!
  googleDocs: OneGraphServiceMetadata!
  googleSearchConsole: OneGraphServiceMetadata!
  googleTranslate: OneGraphServiceMetadata!
  hubspot: OneGraphServiceMetadata!
  intercom: OneGraphServiceMetadata!
  mailchimp: OneGraphServiceMetadata!
  meetup: OneGraphServiceMetadata!
  netlify: OneGraphServiceMetadata!
  notion: OneGraphServiceMetadata!
  outreach: OneGraphServiceMetadata!
  productHunt: OneGraphServiceMetadata!
  quickbooks: OneGraphServiceMetadata!
  salesforce: OneGraphServiceMetadata!
  sanity: OneGraphServiceMetadata!
  slack: OneGraphServiceMetadata!
  spotify: OneGraphServiceMetadata!
  stripe: OneGraphServiceMetadata!
  twitchTv: OneGraphServiceMetadata!
  twilio: OneGraphServiceMetadata!
  ynab: OneGraphServiceMetadata!
  youTube: OneGraphServiceMetadata!
  zeit: OneGraphServiceMetadata!
  zendesk: OneGraphServiceMetadata!
  trello: OneGraphServiceMetadata!
  twitter: OneGraphServiceMetadata!
  airtable: OneGraphServiceMetadata!
  apollo: OneGraphServiceMetadata!
  brex: OneGraphServiceMetadata!
  bundlephobia: OneGraphServiceMetadata!
  chargebee: OneGraphServiceMetadata!
  clearbit: OneGraphServiceMetadata!
  cloudflare: OneGraphServiceMetadata!
  crunchbase: OneGraphServiceMetadata!
  descuri: OneGraphServiceMetadata!
  fedex: OneGraphServiceMetadata!
  googleMaps: OneGraphServiceMetadata!
  graphcms: OneGraphServiceMetadata!
  immigrationGraph: OneGraphServiceMetadata!
  logdna: OneGraphServiceMetadata!
  mixpanel: OneGraphServiceMetadata!
  mux: OneGraphServiceMetadata!
  npm: OneGraphServiceMetadata!
  onegraph: OneGraphServiceMetadata!
  orbit: OneGraphServiceMetadata!
  openCollective: OneGraphServiceMetadata!
  rss: OneGraphServiceMetadata!
  ups: OneGraphServiceMetadata!
  usps: OneGraphServiceMetadata!
  wordpress: OneGraphServiceMetadata!
  facebook: OneGraphServiceMetadata! @deprecated(reason: "Use facebookBusiness.")
}

"""Currently authed user"""
type Viewer {
  """Metadata and logged-in state for all OneGraph services"""
  serviceMetadata: OneGraphServicesMetadata!

  """Currently logged in oneUser"""
  oneGraph: OneGraphUser
}

type Query {
  me(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): Viewer!

  """Fetches an object given its globally unique `oneGraphId`."""
  oneGraphNode(
    """The globally unique `oneGraphId`."""
    oneGraphId: ID!

    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphNode
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphServiceQuery!
}